//=-==-==-==-==-==-==-==-==-==-==-==-==-==-==-=
// –ë–û–¢ –°–û–ó–î–ê–í–ê–õ–°–Ø –î–õ–Ø –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø –í –ë–ï–°–ï–î–ê–• VK
// author: Bichurin Artem bichurinet@ya.ru
//=-==-==-==-==-==-==-==-==-==-==-==-==-==-==-=
const VK = require("node-vk-bot-api");
const api = require("node-vk-bot-api/lib/api");
const Markup = require("node-vk-bot-api/lib/markup");
const Session = require("node-vk-bot-api/lib/session");
const session = new Session();
const mongoose = require("mongoose");
const room = require("./schema/room");
const iconv = require("iconv-lite");
const axios = require("axios");
const config = require("config");
const fs = require("fs");

const token = config.get("token");
const dbURL = config.get("database");
const bot = new VK(token);
bot.use(session.middleware());

const arCards21 = [
  { name: "6", score: 6 },
  { name: "7", score: 7 },
  { name: "8", score: 8 },
  { name: "9", score: 9 },
  { name: "10", score: 10 },
  { name: "J", score: 2 },
  { name: "Q", score: 3 },
  { name: "K", score: 4 },
  { name: "A", score: 11 },
];

const arItems = [
  { name: "glove", symbol: "ü•ä" },
  { name: "beer", symbol: "üçª" },
  { name: "weed", symbol: "üåø" },
];

const arLoot = [
  null,
  [
    arItems[1],
    arItems[0],
    arItems[1],
    arItems[0],
    arItems[2],
    arItems[0],
    arItems[1],
    arItems[0],
    arItems[1],
    arItems[2],
  ],
  null,
];

async function start() {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await mongoose.connect(dbURL, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    // –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async function getNeededUser(ctx, user, conversationID, userID) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ—Å–µ–¥—ã
        const conversation = await bot.execute(
          "messages.getConversationMembers",
          {
            peer_id: conversationID,
          }
        );
        // –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return conversation.profiles.filter((profile) => {
          if (userID) return new RegExp(userID, "i").test(profile.id);
          return new RegExp(user, "i").test(profile.screen_name);
        })[0];
      } catch (err) {
        ctx.reply("‚ò¢ –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã, –±–æ—Ç—É –Ω—É–∂–Ω–∞ –∞–¥–º–∏–Ω–∫–∞!");
      }
    }
    // –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
    async function neededRoom(conversationID) {
      try {
        const arRooms = await room.find({});
        return arRooms.filter((el) => el.room === conversationID)[0];
      } catch (err) {
        console.error(err);
      }
    }
    // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Ä–µ—Å–ø–µ–∫—Ç/—Ä–µ–ø–æ—Ä—Ç
    function findState(ctx, ru = false) {
      if (ru) {
        let stateRU = ctx.message.text.match(/(—Ä–µ—Å–ø–µ–∫—Ç|—Ä–µ–ø–æ—Ä—Ç)/gi)[0];
        if (stateRU === "—Ä–µ—Å–ø–µ–∫—Ç") return "respect";
        if (stateRU === "—Ä–µ–ø–æ—Ä—Ç") return "report";
      }
      return ctx.message.text.match(/(report|respect|res|rep)/gi)[0];
    }
    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    async function getUser(userID, nameCase = "nom") {
      try {
        const user = await bot.execute("users.get", {
          user_ids: userID,
          fields: "sex,screen_name",
          name_case: nameCase,
        });
        return user[0];
      } catch (err) {
        console.error(err);
      }
    }
    // –ü–æ–ª—É—á–∞–µ—Ç –º–∏–Ω. —Å–µ–∫. –º—Å.
    function getTime(unix) {
      const date = new Date(unix * 1000);
      return {
        m: date.getMinutes(),
        s: date.getSeconds(),
        ms: new Date().getMilliseconds(),
      };
    }
    // –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ
    function getRandomInt(min, max) {
      min = Math.ceil(min);
      max = Math.floor(max);
      return Math.floor(Math.random() * (max - min)) + min;
    }
    // –ü—Ä–æ—Ç–∏–≤ —Å–ø–∞–º–∞
    async function antiSpam(ctx, delay = 10) {
      ctx.session.userTime = ctx.session.userTime || getTime(ctx.message.date);
      ctx.session.userReg = ctx.session.userReg || false;
      ctx.session.warn = ctx.session.warn || false;
      //console.log(ctx.session.userTime.s, getTime(ctx.message.date).s);
      async function check(res) {
        if (res < delay) {
          if (!ctx.session.warn) {
            ctx.session.warn = true;
            await bot.sendMessage(
              ctx.message.peer_id,
              `‚åõ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ ${delay - res} —Å–µ–∫.`
            );
          }
          return true;
        } else {
          ctx.session.userTime = getTime(ctx.message.date);
          ctx.session.warn = false;
          return false;
        }
      }
      if (ctx.session.userTime.m === getTime(ctx.message.date).m) {
        if (ctx.session.userTime.ms === getTime(ctx.message.date).ms) {
          ctx.session.userTime = getTime(ctx.message.date);
          ctx.session.warn = false;
          return false;
        } else {
          if (!ctx.session.userReg) {
            ctx.session.userReg = true;
            return false;
          }
          return await check(
            getTime(ctx.message.date).s - ctx.session.userTime.s
          );
        }
      } else {
        let res = 60 - (ctx.session.userTime.s - getTime(ctx.message.date).s);
        return await check(res);
      }
    }
    // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function getStatus(respect, report, user) {
      if (respect / report > 2) {
        if (user.sex === 1) return "–†–µ—Å–ø–µ–∫—Ç–∞–±–µ–ª—å–Ω–∞—è";
        return "–†–µ—Å–ø–µ–∫—Ç–∞–±–µ–ª—å–Ω—ã–π";
      }
      if (respect / report >= 1) {
        if (user.sex === 1) return "–†–æ–≤–Ω–∞—è";
        return "–†–æ–≤–Ω—ã–π";
      }
      if (report > respect) {
        if (user.sex === 1) return "–í–∞—Ñ–µ–ª—å–∫–∞";
        return "–í–∞—Ñ–ª—è";
      }
    }
    // –ö–∏–¥–∞–µ—Ç —Ä–µ–ø–æ—Ä—Ç/—Ä–µ—Å–ø–µ–∫—Ç
    async function sendStateUser(ctx, reason, dropUser, dropUserID = null) {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const conversation = await bot.execute(
        "messages.getConversationMembers",
        {
          peer_id: ctx.message.peer_id,
        }
      );
      if (conversation.profiles.length === 1) {
        return ctx.reply("‚ò¢ –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö!");
      }
      let state = findState(ctx);
      // id –±–µ—Å–µ–¥—ã
      const roomID = ctx.message.peer_id;
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
      const sender = await bot.execute("users.get", {
        user_ids: ctx.message.from_id,
      });
      // –ù—É–∂–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –±–µ—Å–µ–¥—ã
      let neededUser = null;

      if (dropUserID !== undefined && dropUser === null) {
        if (dropUserID) {
          if (dropUserID.from_id < 0) {
            if (state === "rep") return ctx.reply(`C–µ–±–µ –∫–∏–Ω—å &#128545;`);
            if (state === "res")
              return ctx.reply(`–ü–∞—Å–∏–±–æ, –∑–∞ —ç—Ç–æ –º–æ–∂–µ—à—å —Å–µ–±—è –ø–æ—Ö–≤–∞–ª–∏—Ç—å ‚ò∫`);
          }
          neededUser = await getNeededUser(
            ctx,
            null,
            roomID,
            dropUserID.from_id
          );
        } else {
          return ctx.reply(
            `&#9762; –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–ª–∏ \n !${state} @id <–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É>`
          );
        }
      } else if (dropUserID === null) {
        neededUser = await getNeededUser(ctx, dropUser, roomID, null);
      } else {
        return ctx.reply(`!${state} @id –ø—Ä–∏—á–∏–Ω–∞`);
      }
      if (state === "res") state = "respect";
      if (state === "rep") state = "report";

      if (neededUser) {
        ctx.session.reportFlag = false;
        // –°–æ–∑–¥–∞–µ–º –±–µ—Å–µ–¥—É
        function createRoomDB() {
          return room.create({
            room: roomID,
            list: [],
          });
        }
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        function sendMessage(state, sticker, mark) {
          const flag = ctx.session.reportFlag;
          return ctx.reply(
            `@${neededUser.screen_name}(${neededUser.last_name}) ${
              neededUser.sex === 2 ? "–ø–æ–ª—É—á–∏–ª" : "–ø–æ–ª—É—á–∏–ª–∞"
            } ${state} ${sticker} (${mark}1)${
              flag ? `, –ø—Ä–∏—á–∏–Ω–∞: ${reason}` : ``
            }`
          );
        }

        const hasRoom = await room.find({ room: roomID });
        if (!hasRoom[0]) await createRoomDB();

        //–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–∏–¥–∞–µ—Ç —Å–µ–±–µ? –ù–∞–¥–æ –Ω–∞–∫–∞–∑–∞—Ç—å!
        if (sender[0].last_name === neededUser.last_name) {
          if (state === "report")
            return ctx.reply(
              `@${neededUser.screen_name}(${neededUser.last_name}), –Ω—É —Ç—ã –∏ &#129313;`
            );
          if (ctx.message.from_id === 292556963)
            return ctx.reply(
              `@${neededUser.screen_name}(${neededUser.first_name}), —Ö–æ—Ä–æ—à, –≤—Å–µ–≥–¥–∞ —Å–≤–µ–∂, —Ç–ª–µ–µ—Ç —à–º–∞–ª—å, –ª–µ—Ç–∏—Ç –∫—ç—à, –∏ –æ–Ω –≤ –¥–µ—Ä—å–º–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —Ü–µ–ª—ã–π –¥–µ–Ω—å...`
            );
          state = "report";
          reason = "–ª—é–±–æ–ø—ã—Ç–Ω—ã–π";
          ctx.session.reportFlag = true;
        }

        const hasUser = await room.find({
          room: roomID,
          "list.user": neededUser.screen_name,
        });
        if (!hasUser[0]) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
          if (state === "respect") {
            room
              .updateOne(
                { room: roomID },
                {
                  $push: {
                    list: {
                      user: neededUser.screen_name,
                      firstName: neededUser.first_name,
                      lastName: neededUser.last_name,
                      status: neededUser.sex === 1 ? "–†–æ–≤–Ω–∞—è" : "–†–æ–≤–Ω—ã–π",
                      respect: 1,
                      report: 0,
                      merit: [reason ? reason : ""],
                      fail: [],
                    },
                  },
                }
              )
              .then(() => {
                sendMessage("—Ä–µ—Å–ø–µ–∫—Ç", "&#129305;", "+");
              });
          } else if (state === "report") {
            room
              .updateOne(
                { room: roomID },
                {
                  $push: {
                    list: {
                      user: neededUser.screen_name,
                      firstName: neededUser.first_name,
                      lastName: neededUser.last_name,
                      status: neededUser.sex === 1 ? "–í–∞—Ñ–µ–ª—å–∫–∞" : "–í–∞—Ñ–ª—è",
                      respect: 0,
                      report: 1,
                      merit: [],
                      fail: [reason ? reason : ""],
                    },
                  },
                }
              )
              .then(() => {
                sendMessage("—Ä–µ–ø–æ—Ä—Ç", "&#128078;", "-");
              });
          }
        } else {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ
          const findState = await room.findOne({
            room: roomID,
            "list.user": neededUser.screen_name,
          });
          let report =
            findState.list.filter(
              (profile) => profile.user === neededUser.screen_name
            )[0].report || 0;
          let respect =
            findState.list.filter(
              (profile) => profile.user === neededUser.screen_name
            )[0].respect || 0;
          let merit =
            findState.list.filter(
              (profile) => profile.user === neededUser.screen_name
            )[0].merit || [];
          let fail =
            findState.list.filter(
              (profile) => profile.user === neededUser.screen_name
            )[0].fail || [];
          if (state === "respect") {
            respect += 1;
            let arMerit = [...merit];
            if (reason) {
              arMerit = [...merit, reason];
            }
            room
              .updateOne(
                { room: roomID, "list.user": neededUser.screen_name },
                {
                  $set: {
                    "list.$.respect": respect,
                    "list.$.report": report,
                    "list.$.status": getStatus(respect, report, neededUser),
                    "list.$.merit": arMerit,
                  },
                }
              )
              .then(() => {
                sendMessage("—Ä–µ—Å–ø–µ–∫—Ç", "&#129305;", "+");
              });
          } else if (state === "report") {
            report += 1;
            let arFail = [...fail];
            if (reason) {
              arFail = [...fail, reason];
            }
            room
              .updateOne(
                { room: roomID, "list.user": neededUser.screen_name },
                {
                  $set: {
                    "list.$.report": report,
                    "list.$.respect": respect,
                    "list.$.status": getStatus(respect, report, neededUser),
                    "list.$.fail": arFail,
                  },
                }
              )
              .then(() => {
                sendMessage("—Ä–µ–ø–æ—Ä—Ç", "&#128078;", "-");
              });
          }
        }
      } else {
        ctx.reply(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${dropUser} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–≤–æ–µ–º—É –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç—É &#129301;`
        );
      }
    }
    // –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥ –∞–¥–º–∏–Ω–æ–º
    async function checkAdmin(ctx, callback) {
      try {
        const res = await bot.execute("messages.getConversationMembers", {
          peer_id: ctx.message.peer_id,
        });
        const admins = res.items
          .filter((item) => item.is_admin)
          .filter((admin) => admin.member_id === ctx.message.from_id);
        if (admins.length > 0) {
          callback();
        } else {
          if (res.profiles.length === 1) return callback();
          ctx.reply("&#9762; –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω, –≤—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!");
        }
      } catch (err) {
        ctx.reply("‚ò¢ –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã, –±–æ—Ç—É –Ω—É–∂–Ω–∞ –∞–¥–º–∏–Ω–∫–∞!");
      }
    }
    // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π
    async function getPosts(ownerID, count, offset, getLength) {
      const { response } = await api("wall.get", {
        owner_id: ownerID,
        count,
        offset,
        access_token: config.get("access_token"),
      });
      if (getLength) return response.count;
      return response.items;
    }
    // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä—É (video, photo, text)
    async function getFilterPosts(
      groupID,
      countPosts,
      offsetPosts,
      postType = "photo"
    ) {
      const posts = await getPosts(groupID, countPosts, offsetPosts);
      const filterPosts = posts.filter((el) => {
        if (Array.isArray(el.attachments)) {
          const type = el.attachments[0].type;
          return type === postType;
        } else {
          return postType === "text";
        }
      });
      if (filterPosts.length < 1) {
        return getFilterPosts(groupID, countPosts, offsetPosts, postType);
      } else {
        return filterPosts;
      }
    }
    // –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π, –Ω—É–∂–Ω—ã–π –ø–æ—Å—Ç
    async function giveRandomPost(ctx, groups, type) {
      ctx.session.group = "";
      try {
        // –í—ã–≤–æ–¥–∏—Ç –ø–æ—Å—Ç
        function sendPost(conversationID) {
          if (type === "video") {
            bot.sendMessage(
              conversationID,
              "",
              `${type}${post.owner_id}_${post.id}`
            );
          } else if (type === "text") {
            bot.sendMessage(conversationID, `${post.text}\n\n${source}`);
          } else {
            bot.sendMessage(
              conversationID,
              `${source}`,
              `${type}${post.owner_id}_${post.id}`
            );
          }
        }
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≥—Ä—É–ø–ø—É
        ctx.session.group = groups[getRandomInt(0, groups.length)];
        // –ò—Å—Ç–æ—á–Ω–∏–∫
        const source = `[public${Math.abs(ctx.session.group)}|–∏—Å—Ç–æ—á–Ω–∏–∫]`;
        // –ö–æ–ª-–≤–æ –∑–∞–ø–∏—Å–∏–µ–π –≤ –≥—Ä—É–ø–ø–µ
        const count = await getPosts(ctx.session.group, 0, 0, true);
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–Ω—ã–π —Å–¥–≤–∏–≥ (—Å –∫–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –≤–∏–¥–µ–æ)
        const offset = getRandomInt(0, Math.floor(count - 98));
        // –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ—Å—Ç—ã
        const posts = await getFilterPosts(
          ctx.session.group,
          count,
          offset,
          type
        );
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç
        const randomPost = posts[getRandomInt(0, posts.length)];
        // –ü–æ—Å—Ç
        let post = {};
        if (type !== "text") {
          post = randomPost.attachments[0][type];
        } else {
          post = randomPost;
        }
        if (!post)
          return bot.sendMessage(
            ctx.message.peer_id,
            `‚ò¢ –ë–ª–∏–Ω –±–ª–∏–Ω—Å–∫–∏–π, –¥–∞–≤–∞–π –µ—â–µ —Ä–∞–∑(`
          );
        // –í—ã–≤–æ–¥–∏–º –ø–æ—Å—Ç
        sendPost(ctx.message.peer_id);
      } catch (err) {
        if (err.response.error_code === 29) {
          ctx.reply(
            "üìà –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç, —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏ –ª–∏–º–∏—Ç –≤–æ–∑–æ–±–Ω–∞–≤–∏—Ç—Å—è \n [–í–ö –¥–∞–µ—Ç 5000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏]"
          );
        } else {
          ctx.reply("‚ò¢ –ë–ª–∏–Ω –±–ª–∏–Ω—Å–∫–∏–π, –Ω–µ –º–æ–≥—É –≤—ã–¥–∞—Ç—å [giveRandomPost]");
        }
        console.error(err);
      }
    }
    // –ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é –¥–ª—è –∏–≥—Ä—ã –≤ "21"
    function showButtons21(conversationID) {
      bot.sendMessage(
        conversationID,
        "üéØ –ò–≥—Ä–∞ –≤ 21 (beta version)",
        null,
        Markup.keyboard(
          [
            Markup.button({
              action: {
                type: "text",
                payload: JSON.stringify({
                  action: "takeCards",
                }),
                label: "–í–∑—è—Ç—å –∫–∞—Ä—Ç—ã",
              },
            }),
            Markup.button({
              action: {
                type: "text",
                payload: JSON.stringify({
                  action: "takeCard",
                }),
                label: "–í–∑—è—Ç—å –µ—â–µ",
              },
            }),
            Markup.button({
              action: {
                type: "text",
                payload: JSON.stringify({
                  action: "giveTop",
                }),
                label: "–¢–æ–ø —á–µ–ª–æ–≤",
              },
            }),
            Markup.button({
              action: {
                type: "text",
                payload: JSON.stringify({
                  action: "giveRule",
                }),
                label: "–ü—Ä–∞–≤–∏–ª–∞",
              },
            }),
            Markup.button({
              action: {
                type: "text",
                payload: JSON.stringify({
                  action: "showCards",
                }),
                label: "–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—ã",
              },
            }),
          ],
          { columns: 2 }
        ).inline()
      );
    }
    // –ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é –¥–ª—è –∏–≥—Ä—ã –≤ "–†—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É"
    function showButtonsRoulette(conversationID) {
      bot.sendMessage(
        conversationID,
        "–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞ ( Õù‡≤†  ñ ‡≤†)=Œµ/ÃµÕáÃøÃø/‚ÄôÃø‚ÄôÃø Ãø ",
        null,
        Markup.keyboard(
          [
            Markup.button({
              action: {
                type: "text",
                payload: JSON.stringify({
                  action: "takeRoulette",
                }),
                label: "–í–∑—è—Ç—å —Ä–µ–≤–æ–ª—å–≤–µ—Ä",
              },
            }),
            Markup.button({
              action: {
                type: "text",
                payload: JSON.stringify({
                  action: "rouletteRoll",
                }),
                label: "–ö—Ä—É—Ç–∏—Ç—å –±–∞—Ä–∞–±–∞–Ω",
              },
            }),
            Markup.button({
              action: {
                type: "text",
                payload: JSON.stringify({
                  action: "rouletteShoot",
                }),
                label: "–°—Ç—Ä–µ–ª—å–Ω—É—Ç—å",
              },
            }),
            Markup.button({
              action: {
                type: "text",
                payload: JSON.stringify({
                  action: "rouletteTop",
                }),
                label: "–¢–æ–ø",
              },
            }),
          ],
          { columns: 1 }
        ).inline()
      );
    }
    // –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    async function showButtonsLoot(conversationID, user) {
      try {
        bot.sendMessage(
          conversationID,
          "select loot",
          null,
          Markup.keyboard(
            [
              Markup.button({
                action: {
                  type: "text",
                  payload: JSON.stringify({
                    action: "throwGlove",
                    user,
                  }),
                  label: "ü•ä",
                },
              }),
              Markup.button({
                action: {
                  type: "text",
                  payload: JSON.stringify({
                    action: "throwBeer",
                    user,
                  }),
                  label: "üçª",
                },
              }),
              Markup.button({
                action: {
                  type: "text",
                  payload: JSON.stringify({
                    action: "throwWeed",
                    user,
                  }),
                  label: "üåø",
                },
              }),
            ],
            { columns: 3 }
          ).inline()
        );
      } catch (err) {
        console.error(err);
      }
    }
    // –í—ã–¥–∞—Ç—å –Ω—É–∂–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ –∞–ª—å–±–æ–º–∞ –≥—Ä—É–ø–ø—ã
    async function getPictureFromAlbum(ctx, text, albumID = 275086127) {
      try {
        const { response } = await api("photos.get", {
          owner_id: -201031864,
          album_id: albumID,
          access_token: config.get("access_token"),
        });
        const pictures = response.items;
        const picture = pictures.filter((el) => el.text === text)[0];
        return `photo${picture.owner_id}_${picture.id}`;
      } catch (err) {
        console.error(err);
        ctx.reply("‚ò¢ –ë–ª–∏–Ω –±–ª–∏–Ω—Å–∫–∏–π, –Ω–µ –º–æ–≥—É –≤—ã–¥–∞—Ç—å [getPictureFromAlbum]");
      }
    }
    // –í—ã–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞—Ä—Ç–∏–Ω–∫—É - –∫–µ–º –æ–Ω —è–≤–ª—è–µ—Ç—Å—è
    async function sendUserWhoHe(ctx, arPerson, albumID = 275086127) {
      try {
        const userID = ctx.message.from_id;
        const randomItem = arPerson[getRandomInt(0, arPerson.length)];
        const picture = await getPictureFromAlbum(ctx, randomItem, albumID);
        const user = await getUser(userID);
        ctx.reply(`${user.first_name}, —Ç—ã ${randomItem}`, picture);
      } catch (err) {
        console.error(err);
        ctx.reply("‚ò¢ –ë–ª–∏–Ω –±–ª–∏–Ω—Å–∫–∏–π, –Ω–µ –º–æ–≥—É –≤—ã–¥–∞—Ç—å [sendUserWhoHe]");
      }
    }
    //==========================================================================================
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Å—Ç—Ä—É—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞
    bot.command(/^!(help|—Ö–µ–ª–ø|–ø–æ–º–æ—â—å)$/, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const res = await getPosts(-201031864, 1, 0);
      const insructionLink = res[0].attachments[0].link.url;
      const insructionTitle = res[0].attachments[0].link.title;
      ctx.reply(insructionTitle + "\n" + insructionLink);
    });
    //===================
    // –ú–ò–ù–ò-–ò–ì–†–´ /(-+)\
    //===================
    // –ò–≥—Ä–∞ "21"
    bot.command(/^!21$/, async (ctx) => {
      const spam = await antiSpam(ctx, 2);
      if (spam) return;
      showButtons21(ctx.message.peer_id);
    });
    // –ò–≥—Ä–∞ "–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞"
    bot.command(/^!rr$/i, async (ctx) => {
      const spam = await antiSpam(ctx, 2);
      if (spam) return;
      showButtonsRoulette(ctx.message.peer_id);
    });
    // –ò–≥—Ä–∞ "–ú–æ–Ω–µ—Ç–∫–∞"
    bot.command(/^!(–º–æ–Ω–µ—Ç–∫–∞|–º)$/i, async (ctx) => {
      const spam = await antiSpam(ctx, 3);
      if (spam) return;
      const user = await getUser(ctx.message.from_id, "gen");
      const side = getRandomInt(0, 2);
      ctx.reply(
        `—É ${user.first_name} ${side === 0 ? "–≤—ã–ø–∞–ª–∞ –†–µ—à–∫–∞" : "–≤—ã–ø–∞–ª –û—Ä—ë–ª"}`
      );
    });
    // –ò–≥—Ä–∞ "ROLL"
    bot.command(/^!(roll|—Ä–æ(–ª|–ª–ª))$/i, async (ctx) => {
      const spam = await antiSpam(ctx, 3);
      if (spam) return;
      const user = await getUser(ctx.message.from_id, "gen");
      const count = getRandomInt(0, 101);
      ctx.reply(`—É ${user.first_name}: ${count}`);
    });
    // –ò–≥—Ä–∞ "–®–∞—Ä —Å—É–¥—å–±—ã"
    bot.command(/^!8\s[a-z–∞-—è0-9\W]+$/, (ctx) => {
      arAnswers = [
        "–ù–µ—Ç",
        "–î–∞",
        "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ",
        "–í–µ—Ä–æ—è—Ç–Ω–æ",
        "–ï—Å—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è",
        "–ó–∞–±—É–¥—å –æ–± —ç—Ç–æ–º",
        "–®–∞–Ω—Å—ã —Ö–æ—Ä–æ—à–∏–µ",
        "–ü—Ä–µ—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ",
        "–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º",
        "–ù–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å",
        "–í–æ–∑–º–æ–∂–Ω–æ",
        "–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º",
        "–î—É—Ö–∏ –≥–æ–≤–æ—Ä—è—Ç - –¥–∞",
        "–ù–µ—Ç",
        "–®–∞–Ω—Å—ã –ø–ª–æ—Ö–∏–µ",
        "–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ",
        "–ú–æ–∂–µ—Ç –±—ã—Ç—å",
        "–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π",
        "–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ",
        "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –¥–∞",
        "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ—Ç",
        "–î—É—Ö–∏ –≥–æ–≤–æ—Ä—è—Ç - –Ω–µ—Ç",
      ];
      return ctx.reply("üé± " + arAnswers[getRandomInt(0, arAnswers.length)]);
    });
    //==========================================================================================
    // –£–±—Ä–∞—Ç—å —É –±–æ—Ç–∞ –∫–Ω–æ–ø–∫–∏
    bot.command(/^!btn\sdel$/, async (ctx) => {
      function delButtons(ctx) {
        ctx.reply("–ö–Ω–æ–ø–∫–∏ —É–±—Ä–∞–Ω—ã &#127918;", null, Markup.keyboard([]));
      }
      checkAdmin(ctx, delButtons.bind(null, ctx));
    });
    // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É –±–æ—Ç–∞ –∫–Ω–æ–ø–∫–∏
    bot.command(/^!btn$/, (ctx) => {
      function addButtons(ctx) {
        ctx.reply(
          "–ö–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã &#127918;",
          null,
          Markup.keyboard([
            [
              Markup.button("–í–∏–¥–æ—Å üé¨", "default"),
              Markup.button("–ê–Ω–µ–∫–¥–æ—Ç üòÜ", "default"),
              Markup.button("–ú–µ–º–∞—Å üê∏", "default"),
            ],
            [
              Markup.button("Gachi üçÜ", "default"),
              Markup.button("–ú—É–∂–∏–∫ –≤ –ø–∏–≤–µ üç∫", "default"),
            ],
          ])
        );
      }
      checkAdmin(ctx, addButtons.bind(null, ctx));
    });
    // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É –±–æ—Ç–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–≥—Ä—ã 21
    bot.command(/^!btn 21$/, (ctx) => {
      function addButton21(ctx) {
        ctx.reply(
          "–ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏–≥—Ä—ã –≤ 21 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ &#127918;",
          null,
          Markup.keyboard([
            [
              Markup.button({
                action: {
                  type: "text",
                  payload: JSON.stringify({
                    action: "showBtn",
                  }),
                  label: "üéØ 21",
                },
              }),
            ],
          ])
        );
      }
      checkAdmin(ctx, addButton21.bind(null, ctx));
    });
    //==========================================================================================
    // –°–∏—Å—Ç–µ–º–∞ —É–≤–∞–∂–µ–Ω–∏–π –∏ –∂–∞–ª–æ–± (—Ä–µ—Å–ø–µ–∫—Ç–æ–≤/—Ä–µ–ø–æ—Ä—Ç–æ–≤)
    bot.command(
      /!(report|respect|res|rep)\s\[[\w]+\W@[\w-]+\]\s[a-z–∞-—è0-9\W]+/i,
      async (ctx) => {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–≤–µ–ª–∏
        const dropUser = ctx.message.text.match(/@[\w-]+/gi)[0].slice(1);
        // –ü—Ä–∏—á–∏–Ω–∞ —Ä–µ–ø–æ—Ä—Ç–∞/—Ä–µ—Å–ø–µ–∫—Ç–∞
        let reason = ctx.message.text
          .split(" ")
          .filter((_, i) => i !== 0 && i !== 1)
          .join(" ");
        sendStateUser(ctx, reason, dropUser);
      }
    );
    bot.command(
      /!(report|respect|res|rep)\s\[[\w]+\W@[\w-]+\]/i,
      async (ctx) => {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–≤–µ–ª–∏
        const dropUser = ctx.message.text.match(/@[\w-]+/gi)[0].slice(1);
        sendStateUser(ctx, null, dropUser);
      }
    );
    bot.command(/!(report|respect|res|rep)\s[a-z–∞-—è0-9\W]+/i, async (ctx) => {
      let dropUserID = ctx.message.fwd_messages[0];
      // –ü—Ä–∏—á–∏–Ω–∞ —Ä–µ–ø–æ—Ä—Ç–∞/—Ä–µ—Å–ø–µ–∫—Ç–∞
      let reason = ctx.message.text
        .split(" ")
        .filter((_, i) => i !== 0)
        .join(" ");
      sendStateUser(ctx, reason, null, dropUserID);
    });
    bot.command(/!(report|respect|res|rep)/i, async (ctx) => {
      let dropUserID = ctx.message.fwd_messages[0];
      sendStateUser(ctx, null, null, dropUserID);
    });
    //==========================================================================================
    // –†–∞–Ω–¥–æ–º–Ω–æ–µ –≤–∏–¥–µ–æ –∏–∑ –≥—Ä—É–ø–ø—ã VK
    bot.command(/(video|–≤–∏–¥–æ—Å)/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const arVideoGroups = [-30316056, -167127847]; // –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø (id)
      giveRandomPost(ctx, arVideoGroups, "video");
    });
    // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ –∏–∑ –≥—Ä—É–ø–ø—ã VK
    bot.command(/^!(video|–≤–∏–¥(–µ–æ|–æ—Å))\s(last|–ª–∞—Å—Ç)$/, async (ctx) => {
      try {
        const spam = await antiSpam(ctx, 5);
        if (spam) return;
        const arVideoGroups = [-30316056, -167127847]; // –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø (id)
        const randomGroupVideo =
          arVideoGroups[getRandomInt(0, arVideoGroups.length)];
        const videoPosts = await getFilterPosts(
          randomGroupVideo,
          20,
          0,
          "video"
        );
        const video = videoPosts[0].attachments[0].video;
        bot.sendMessage(
          ctx.message.peer_id,
          "",
          `video${video.owner_id}_${video.id}`
        );
      } catch (err) {
        console.error(err);
        ctx.reply("&#9762; –ë–ª–∏–Ω –±–ª–∏–Ω—Å–∫–∏–π, –Ω–µ –º–æ–≥—É –≤—ã–¥–∞—Ç—å [video_last]");
      }
    });
    //==========================================================================================
    // –°–ª—É—á–∞–π–Ω—ã–π –º–µ–º –∏–∑ –≥—Ä—É–ø–ø—ã VK
    bot.command(/^!–±—ã–¥–ª–æ–º–µ–º$/i, async (ctx) => {
      const spam = await antiSpam(ctx, 3);
      if (spam) return;
      const arMemGroups = [-45745333, -162541031, -23246051]; // –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø (id)
      giveRandomPost(ctx, arMemGroups, "photo");
    });
    bot.command(/(me(m|es)|–º–µ(–º|–º–µ—Å|–º—á–∏–∫|–º–∞—Å))/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const arMemGroups = [-45745333, -155464693, -163058008]; // –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø (id)
      giveRandomPost(ctx, arMemGroups, "photo");
    });
    //==========================================================================================
    // –°–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç –¥–ª—è –¥–µ–¥–æ–≤
    bot.command(/^!(anec old|–∞–Ω–µ–∫ –æ–ª–¥|–∞–Ω–µ–∫–¥–æ—Ç –æ–ª–¥)$/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      async function getAnecdote() {
        try {
          return axios
            .get("http://rzhunemogu.ru/RandJSON.aspx?CType=11", {
              responseType: "arraybuffer",
              responseEncoding: "binary",
            })
            .then((response) =>
              iconv.decode(Buffer.from(response.data), "windows-1251")
            );
        } catch (err) {
          console.error(err);
          ctx.reply("&#9762; –ë–ª–∏–Ω –±–ª–∏–Ω—Å–∫–∏–π, –Ω–µ –º–æ–≥—É –≤—ã–¥–∞—Ç—å [anec_old]");
        }
      }
      getAnecdote(ctx).then((data) => {
        let anecdote = data.replace(/\{"content":"/, "");
        anecdote = anecdote.split('"}')[0];
        ctx.reply(anecdote);
      });
    });
    //==========================================================================================
    // –°–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç –∏–∑ –≥—Ä—É–ø–ø—ã VK
    bot.command(/(–∞–Ω–µ(–∫|–¥–æ—Ç(—ã)))/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const arAnecGroups = [-149279263]; // –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø (id)
      giveRandomPost(ctx, arAnecGroups, "text");
    });
    //==========================================================================================
    // –ö—Ç–æ —è –∏–∑ - –æ—Ç–ø—Ä–∞–≤—è–ª–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.command(/^–∫—Ç–æ —è –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∞—Ü–∞–Ω–æ–≤$/, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const arRealGuys = [
        "–ê–Ω—Ç–æ—Ö–∞",
        "–ê—Ä–º–µ–Ω–∫–∞",
        "–í–∞–ª—è",
        "–ë–∞–∑–∞–Ω–æ–≤",
        "–ö–æ–ª—è–Ω",
        "–í–æ–≤–∞–Ω",
        "–ì–µ–Ω–∞",
        "–ö–æ–≤–∞–ª—å—á—É–∫",
        "–ú–∞—Ä–∏–Ω–∫–∞",
        "–ú–∞—à–∫–∞",
        "–≠–¥–∏–∫",
        "–ò–≥–æ—Ä—å –°–µ—Ä–≥–µ–µ–≤–∏—á",
        "–°–µ—Ä–≥–µ–π –ò–≤–∞–Ω–æ–≤–∏—á",
      ];
      sendUserWhoHe(ctx, arRealGuys, 275747257);
    });
    bot.command(/^–∫—Ç–æ —è –∏–∑ –¥–æ—Ç—ã$/, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const arDoters = [
        "–≤–æ–¥–Ω—ã–π",
        "–∞–Ω—Ç–∏ –∫—Ä–∏–ø",
        "–∫—Ä–∏–ø–æ—á–µ–∫",
        "–æ–≥—Ä—ã –º–∞–≥–∏",
        "–ø–∞–¥–∂ —Ç–∞–Ω—Ü–æ—Ä",
        "–ø–µ—Ç—É—Ö",
        "axe",
        "–ø—É–¥–∂ –æ—Ö–æ—Ç–Ω–∏–∫",
        "–ø—É–¥–∂ —Å —É–∫—Ä–∞–∏–Ω—ã",
        "—Ä—É–¥–≥–µ –∏–Ω–≤–∞–ª–∏–¥—É—Å",
        "—á—ë—Ä–Ω—ã–π",
        "–ø—É–¥–∂ —Å –∑–∞–≤–æ–¥–∞",
        "—à–∫–æ–ª—å–Ω—ã–π –ø—É–¥–∂–∏–∫",
        "–≥–Ω–∏–¥–∞",
        "wk papi4",
        "—Å–ª–µ–ø—ã—à",
        "—à–ª—è–ø–∞ —É—Å–∞—Ç–∞—è",
        "–∫—Ä—ã—Å–∞",
        "–∫–æ–ª—Ö–æ–∑–Ω–∏–∫",
        "–Ω–µ–∫—Ä–æ—Ñ–∏–ª",
        "–ª—ë—Ö–∞",
        "–¥–µ—Ä–µ–≤–æ",
        "—Ä—ã–∂–∞—è –æ—Ç–æ—Ä–≤–∞",
        "—Å–æ—Å–∞–ª–∫–∞ –º–µ—Å—Ç–Ω–æ–≥–æ –¥–≤–æ—Ä–∞",
        "–ø–µ–Ω—ë–∫",
        "—á–µ—á–µ–Ω",
      ];
      sendUserWhoHe(ctx, arDoters, 275750553);
    });
    bot.command(/^–∫–∞–∫–∞—è —è –¥–æ—Ä–∞$/, async (ctx) => {
      const spam = await antiSpam(ctx, 3);
      if (spam) return;
      const arDoters = [
        "–¥–æ—Ä–∞ —Å –ø–∞–ª–∫–æ–π –≤ –∂–æ–ø–µ",
        "–¥–æ—Ä–∞ —Å —à–∏–∑–æ–π",
        "–î–£–†–ê, –ù–ï –°–¢–†–ï–õ–Ø–ô –ë–õ–Ø–¢–¨",
        "–¥–æ—Ä–∞ –ø–æ—Å—Ç–µ–ª—å–Ω—ã–π –∫–ª–æ–ø",
        "–¥–æ—Ä–∞ –¥–∑–µ–Ω",
        "–¥–æ—Ä–∞ –∫—å—é—Ç-—Ä–æ–∫–µ—Ä—à–∞üé∏",
        "–¥–æ—Ä–∞, —Å—Ä—É—â–∞—è –∑–∞ –≥–∞—Ä–∞–∂–æ–ºüí©",
        "–¥–æ—Ä–∞ —Ä–∞—Å—Ç–∞üçÄ",
        "–¥–æ—Ä–∞ –ø–æ–¥ —Å–∞–ª—è–º–∏",
        "–≥–æ–ª–æ–¥–Ω–∞—è –¥–æ—Ä–∞ü§§",
        "–¥–æ—Ä–∞ –∑–∞–π–∫–∞‚ò∫",
      ];
      sendUserWhoHe(ctx, arDoters, 277011573);
    });
    //==========================================================================================
    // –í—ã–¥–∞—ë—Ç –Ω—É–∂–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.command(/(–º—É–∂–∏–∫–∞ –≤ –ø–∏–≤–µ|–º—É–∂–∏–∫ –≤ –ø–∏–≤–µ|–ø–∏–≤–æ –≤ –º—É–∂–∏–∫–µ)/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const picture = await getPictureFromAlbum(ctx, "–ú—É–∂–∏–∫ –≤ –ø–∏–≤–µ");
      ctx.reply("", picture);
    });
    bot.command(/(—Å—Ç(–µ|—ç)—Ç—Ö(–µ|—ç|–∞)–º)/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const picture = await getPictureFromAlbum(ctx, "—Å—Ç–µ–π—Ç–µ–º");
      ctx.reply("", picture);
    });
    bot.command(/(–ø(—É|–∞)–¥(–∂|–∂–∏–∫)|(–ø|—Ä)(—É|–∞)–¥–≥–µ|pudge|–±—ã–¥–ª–æ)/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const picture = await getPictureFromAlbum(ctx, "–ø—É–¥–∂");
      ctx.reply("", picture);
    });
    bot.command(/(—Å—É–µ—Ç(–∞|—É))/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const picture = await getPictureFromAlbum(ctx, "—Å—É–µ—Ç–∞");
      ctx.reply("", picture);
    });
    bot.command(/(–ø–∞–º(-|\s)–ø–∞—Ä–∞–º)/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const picture = await getPictureFromAlbum(ctx, "–ø–∞–º-–ø–∞—Ä–∞–º");
      ctx.reply("", picture);
    });
    bot.command(/–ø–∞–ø–∏—á/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const picture = await getPictureFromAlbum(ctx, "–ø–∞–ø–∏—á");
      ctx.reply("", picture);
    });
    bot.command(/–Ω—ã–∞–∞/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const picture = await getPictureFromAlbum(ctx, "–Ω—ã–∞");
      ctx.reply("", picture);
    });
    bot.command(/(–∫–ª–∞—Å—Å–∏–∫–∞|classic)/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const picture = await getPictureFromAlbum(ctx, "–∫–ª–∞—Å—Å–∏–∫–∞");
      ctx.reply("", picture);
    });
    bot.command(/–±–∞—è–Ω/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const picture = await getPictureFromAlbum(ctx, "–±–∞—è–Ω");
      ctx.reply("", picture);
    });
    bot.command(
      /(–∑–∞–µ–±(—É–º–±–∞|–∏—Å—å)|–∑–±—Å|—á(–µ|—ë|–æ)—Ç–∫(–æ|–∞)|–≤–Ω–∞—Ç—É—Ä–µ|–∫–ª–∞—Å—Å|–º–æ–≥(—ë|–µ)—Ç–µ)/i,
      async (ctx) => {
        const spam = await antiSpam(ctx, 5);
        if (spam) return;
        const picture = await getPictureFromAlbum(ctx, "—á–æ—Ç–∫–æ");
        ctx.reply("", picture);
      }
    );
    bot.command(
      /(—Ö–∞–ø–∞—Ç—å|–Ω–∞–∫—É—Ä–∏—Ç–µ|–∫—É—Ä–∏—Ç—å|–Ω–∞–ø–∞—Å|–∫–æ—Å—è–∫|–Ω–∞—Ö–∞–ø–∞–π—Ç–µ|—Ö–∞–ø–Ω–µ–º|–Ω–∞–∫—É—Ä–∏—Ç—å—Å—è)/i,
      async (ctx) => {
        const spam = await antiSpam(ctx, 5);
        if (spam) return;
        const picture = await getPictureFromAlbum(ctx, "smoke");
        ctx.reply("", picture);
      }
    );
    bot.command(/(–∫–∞–π(—Ñ|—Ñ—É—é)|–∫–∞–µ—Ñ)/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const picture = await getPictureFromAlbum(ctx, "–∫–∞–π—Ñ");
      ctx.reply("", picture);
    });
    bot.command(/(–∑–∞–Ω—è(—Ç|—Ç–æ–π)|—É –º–µ–Ω—è –¥–µ–ª–∞)/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const picture = await getPictureFromAlbum(ctx, "–∑–∞–Ω—è—Ç");
      ctx.reply("", picture);
    });
    bot.command(/–∑–∞–π–º–∏—Ç–µ/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const picture = await getPictureFromAlbum(ctx, "–∑–∞–π–º–∏—Ç–µ");
      ctx.reply("", picture);
    });
    bot.command(/—Ö–æ–∫–∞–≥–µ/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const picture = await getPictureFromAlbum(ctx, "—Ö–æ–∫–∞–≥–µ");
      ctx.reply("", picture);
    });
    bot.command(
      /(–≥–æ—Ä–∏–Ω|—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫|—á—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ –≤ –º–æ–µ–º —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ|–∫—É—à–∞—Ü)/i,
      async (ctx) => {
        const spam = await antiSpam(ctx, 5);
        if (spam) return;
        const picture = await getPictureFromAlbum(ctx, "–≥–æ—Ä–∏–Ω");
        ctx.reply("", picture);
      }
    );
    bot.command(
      /^–Ω–µ(–ø|\s–ø)–æ–≤–µ–∑–ª–æ|–Ω–µ(–ø|\s–ø)–æ–≤–µ–∑–ª–æ\s–Ω–µ(–ø|\s–ø)–æ–≤–µ–∑–ª–æ$/i,
      async (ctx) => {
        const spam = await antiSpam(ctx, 5);
        if (spam) return;
        const picture = await getPictureFromAlbum(ctx, "–Ω–µ –ø–æ–≤–µ–∑–ª–æ");
        ctx.reply("", picture);
      }
    );
    bot.command(/^(–ø–æ–≤–µ–∑–ª–æ\s–ø–æ–≤–µ–∑–ª–æ)|–ø–æ–≤–µ–∑–ª–æ$/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const picture = await getPictureFromAlbum(ctx, "–ø–æ–≤–µ–∑–ª–æ");
      ctx.reply("", picture);
    });
    bot.command(/^–ø—Ä–∞–≤–∏–ª–∞$/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const picture = await getPictureFromAlbum(ctx, "–ø—Ä–∞–≤–∏–ª–∞");
      ctx.reply("", picture);
    });
    bot.command(/^–æ—Ç–µ—Ü|—Ç—è–∂–µ–ª–æ$/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const picture = await getPictureFromAlbum(ctx, "—Ç—è–∂–µ–ª–æ");
      ctx.reply("", picture);
    });
    bot.command(/^!–ª—è–ø–∏–Ω$/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const picture = await getPictureFromAlbum(ctx, "–ª—è–ø–∏–Ω");
      ctx.reply("", picture);
    });
    //==========================================================================================
    // –°–ª—É—á–∞–π–Ω—ã–π Gachimuchi
    bot.command(/(–≥–∞—á–∏|gachi)/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      const arGachi = [
        "&#9794;fuck you&#9794;",
        "&#9794;fucking slave&#9794;",
        "&#9794;boss on this gym&#9794;",
        "&#9794;dungeon master&#9794;",
        "&#9794;swallow my cum&#9794;",
        "&#9794;fat cock&#9794;",
        "&#9794;the semen&#9794;",
        "&#9794;full master&#9794;",
        "&#9794;drop of cum&#9794;",
        "&#9794;Billy&#9794;",
        "&#9794;do anal&#9794;",
        "&#9794;get your ass&#9794;",
        "&#9794;fisting anal&#9794;",
        "&#9794;long latex cock&#9794;",
        "&#9794;do finger in ass&#9794;",
        "&#9794;leatherman&#9794;",
        "&#9794;dick&#9794;",
        "&#9794;gay&#9794;",
        "&#9794;have nice ass&#9794;",
        "&#9794;boy next door&#9794;",
        "&#9794;Van&#9794;",
        "&#9794;leather stuff&#9794;",
        "—É–∫–ª–æ–Ω–∏–ª—Å—è –æ—Ç gachimuchi",
      ];
      try {
        const conversationID = ctx.message.peer_id;
        const conversation = await bot.execute(
          "messages.getConversationMembers",
          {
            peer_id: conversationID,
          }
        );
        const randomPerson =
          conversation.profiles[getRandomInt(0, conversation.profiles.length)];
        const randomGachi = arGachi[getRandomInt(0, arGachi.length - 1)];
        ctx.reply(
          `@${randomPerson.screen_name}(${randomPerson.last_name}) ${randomGachi}`
        );
      } catch (err) {
        ctx.reply("&#9762; –î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω—É–∂–Ω–∞ –∞–¥–º–∏–Ω–∫–∞!");
      }
    });
    // –ü–æ—Å–º–æ—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Å–ø–µ—Ç–∫–∞–º/—Ä–µ–ø–æ—Ä—Ç–∞–º
    async function showStatus(ctx, user) {
      const neededUser = await getNeededUser(ctx, user, ctx.message.peer_id);
      if (neededUser) {
        const roomID = ctx.message.peer_id;
        const findUser = await room.findOne({
          room: roomID,
          "list.user": neededUser.screen_name,
        });
        let statusUser = null;

        if (findUser) {
          statusUser = findUser.list.filter((profile) => {
            return profile.user === neededUser.screen_name;
          })[0];
        }

        if (!statusUser.status)
          return ctx.reply(
            `&#128203; –û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ @${user} –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ª—ã—à–Ω–æ...`
          );

        const merit = statusUser.merit.join(", ");
        const fail = statusUser.fail.join(", ");
        ctx.reply(
          `@${statusUser.user}(${neededUser.last_name}) ‚Äî ${statusUser.status}\n(–†–µ—Å–ø–µ–∫—Ç–æ–≤: ${statusUser.respect} | –†–µ–ø–æ—Ä—Ç–æ–≤: ${statusUser.report})\n–ó–∞—Å–ª—É–≥–∏: ${merit}\n–ö–æ—Å—è–∫–∏: ${fail}`
        );
      } else {
        ctx.reply(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${user} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–≤–æ–µ–º—É –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç—É &#129301;`
        );
      }
    }
    bot.command(/^!(status|st)\s\[[\w]+\W@[\w-]+\]$/i, async (ctx) => {
      const spam = await antiSpam(ctx, 3);
      if (spam) return;
      const conversation = await bot.execute(
        "messages.getConversationMembers",
        {
          peer_id: ctx.message.peer_id,
        }
      );
      if (conversation.profiles.length === 1) {
        return ctx.reply("‚ò¢ –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö!");
      }
      const user = ctx.message.text.match(/@[\w-]+/gi)[0].slice(1);
      await showStatus(ctx, user);
    });
    bot.command(/^!(status|st)$/i, async (ctx) => {
      const spam = await antiSpam(ctx, 3);
      if (spam) return;
      const conversation = await bot.execute(
        "messages.getConversationMembers",
        {
          peer_id: ctx.message.peer_id,
        }
      );
      if (conversation.profiles.length === 1) {
        return ctx.reply("‚ò¢ –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö!");
      }
      const dropUser = ctx.message.fwd_messages[0];
      if (!dropUser) {
        //let state = ctx.message.text.match(/(status|st)/ig)[0];
        const user = await getUser(ctx.message.from_id);
        return await showStatus(ctx, user.screen_name);
      }
      const user = await getUser(dropUser.from_id);
      await showStatus(ctx, user.screen_name);
    });
    //==========================================================================================
    // –¢–æ–ø 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Ä–µ–ø–æ—Ä—Ç–∞–º/—Ä–µ—Å–ø–µ–∫—Ç–∞–º
    bot.command(/^!(top|—Ç–æ–ø)\s(report|respect|res|rep)$/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      let state = findState(ctx);
      if (state === "rep") state = "report";
      if (state === "res") state = "respect";
      const conversationID = ctx.message.peer_id;
      try {
        const room = await neededRoom(conversationID);
        function compare(a, b) {
          if (a[state] > b[state]) return -1;
          if (a[state] === a[state]) return 0;
          if (a[state] < a[state]) return 1;
        }
        const roomTop = room.list.sort(compare);
        const topList = roomTop.map((el, index) => {
          if (index < 10) {
            return `${index + 1}. ${el.firstName} ${el.lastName} - ${
              el[state]
            }\n`;
          }
        });
        ctx.reply(
          `–¢–æ–ø —á–µ–ª–æ–≤ –ø–æ ${
            state === "respect" ? "—Ä–µ—Å–ø–µ–∫—Ç–∞–º &#129305;" : "—Ä–µ–ø–æ—Ä—Ç–∞–º &#128078;"
          }\n${topList.join("")}`
        );
      } catch (err) {
        ctx.reply(
          "&#128203; –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç," +
            " –∫–∏–¥–∞–π—Ç–µ —Ä–µ—Å–ø–µ–∫—Ç—ã/—Ä–µ–ø–æ—Ä—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –±–µ—Å–µ–¥—ã"
        );
      }
    });
    bot.command(/^!(top|—Ç–æ–ø)$/i, async (ctx) => {
      const spam = await antiSpam(ctx, 5);
      if (spam) return;
      ctx.reply("&#9762; !top res –∏–ª–∏ rep");
    });
    //==========================================================================================
    // –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ø –≤ –∏–≥—Ä–µ 21
    bot.command(/^!21\sclear\stop$/, (ctx) => {
      async function clearTop21(ctx) {
        try {
          const rooms = JSON.parse(fs.readFileSync("./cards21.json", "utf-8"));
          const conversationID = ctx.message.peer_id;
          const neededRoom = rooms.filter(
            (el) => el.room === conversationID
          )[0];
          if (!neededRoom)
            return ctx.reply("&#9762; –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —á–∏—Å—Ç–∏—Ç—å");
          if (neededRoom.top.length < 1)
            return ctx.reply("&#9762; –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —á–∏—Å—Ç–∏—Ç—å");
          neededRoom.top = [];
          const arDelRoom = rooms.filter((el) => el.room !== conversationID);
          const newRooms = [neededRoom, ...arDelRoom];
          await bot.sendMessage(
            conversationID,
            "üìú –¢–æ–ø –≤ –∏–≥—Ä–µ üéØ 21 —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!"
          );
          fs.writeFileSync("./cards21.json", JSON.stringify(newRooms, null, 2));
        } catch (err) {
          console.error(err);
          ctx.reply("&#9762; –ë–ª–∏–Ω –±–ª–∏–Ω—Å–∫–∏–π, —Å–±–æ–π –∫–∞–∫–æ–π-—Ç–æ [game 21]");
        }
      }
      checkAdmin(ctx, clearTop21.bind(null, ctx));
    });
    //==========================================================================================
    // –û—á–∏—Å—Ç–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–µ 21 (–û–±–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É)
    bot.command(/^!21\supdate\sgame$/, (ctx) => {
      async function updateGame21(ctx) {
        try {
          const rooms = JSON.parse(fs.readFileSync("./cards21.json", "utf-8"));
          const conversationID = ctx.message.peer_id;
          const neededRoom = rooms.filter(
            (el) => el.room === conversationID
          )[0];
          if (!neededRoom)
            return ctx.reply("&#9762; –ù–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç –≤ üéØ 21...");
          if (neededRoom.players.length < 1)
            return ctx.reply("&#9762; –ù–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç –≤ üéØ 21...");
          neededRoom.players = [];
          neededRoom.start = false;
          neededRoom.online = 0;
          const arDelRoom = rooms.filter((el) => el.room !== conversationID);
          const newRooms = [neededRoom, ...arDelRoom];
          await bot.sendMessage(
            conversationID,
            "–ò–≥—Ä–∞ –≤ üéØ 21 –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
            null,
            Markup.keyboard([
              Markup.button({
                action: {
                  type: "text",
                  payload: JSON.stringify({
                    action: "takeCards",
                  }),
                  label: "–í–∑—è—Ç—å –∫–∞—Ä—Ç—ã",
                },
              }),
            ]).inline()
          );
          fs.writeFileSync("./cards21.json", JSON.stringify(newRooms, null, 2));
        } catch (err) {
          console.error(err);
          ctx.reply("&#9762; –ë–ª–∏–Ω –±–ª–∏–Ω—Å–∫–∏–π, —Å–±–æ–π –∫–∞–∫–æ–π-—Ç–æ [update_21]");
        }
      }
      checkAdmin(ctx, updateGame21.bind(null, ctx));
    });
    // secret command
    bot.command(/^!21 clrg$/, (ctx) => {
      function clearGame21() {
        fs.writeFileSync("./cards21.json", JSON.stringify([], null, 2));
      }
      checkAdmin(ctx, clearGame21.bind(null, ctx));
    });
    // LOOT INVENTORY
    bot.command(/^!inv$/, async (ctx) => {
      const roomID = ctx.message.peer_id;
      const userID = ctx.message.from_id;
      try {
        const conversation = await bot.execute(
          "messages.getConversationMembers",
          {
            peer_id: roomID,
          }
        );
        if (conversation.profiles.length === 1) {
          return ctx.reply("‚ò¢ –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö!");
        }
        const user = await getUser(userID);
        const neededRoom = await room.findOne({
          room: roomID,
          "list.user": user.screen_name,
        });
        if (!neededRoom)
          return await bot.sendMessage(userID, "‚ò¢ –£ –≤–∞—Å –Ω–µ—Ç—É –ª—É—Ç–∞ ;(");
        const neededUser = neededRoom.list.filter(
          (el) => el.user === user.screen_name
        )[0];
        if (typeof neededUser.inventory[arItems[0].name] !== "number")
          return await bot.sendMessage(userID, "‚ò¢ –£ –≤–∞—Å –Ω–µ—Ç—É –ª—É—Ç–∞ ;(");

        const items = [...Object.keys(neededUser.inventory)];
        items.splice(0, 1);
        inventoryItems = items
          .map((el) => {
            const symbol = arItems.filter((i) => i.name === el)[0].symbol;
            return `${symbol} ${el}: ${neededUser.inventory[el]} —à—Ç.\n`;
          })
          .join("");
        const buffWeed = neededUser.buff.weed ? "–µ—Å—Ç—å" : "–Ω–µ—Ç—É";
        const buffBeer = neededUser.buff.beer ? "–µ—Å—Ç—å" : "–Ω–µ—Ç—É";
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤ –ª—Å —á–µ–ª—É
        await bot.sendMessage(
          userID,
          `${inventoryItems}\n–ë–∞—Ñ –ø–∏–≤–∞: ${buffBeer}\n–ë–∞—Ñ —Ç—Ä–∞–≤—ã: ${buffWeed}\n(–†–µ—Å–ø–µ–∫—Ç–æ–≤: ${neededUser.respect} | –†–µ–ø–æ—Ä—Ç–æ–≤: ${neededUser.report})`
        );
      } catch (err) {
        console.error(err);
        bot.sendMessage(
          roomID,
          `üíº –ù–∞–ø–∏—à–∏—Ç—É –±–æ—Ç—É (—á—Ç–æ —É–≥–æ–¥–Ω–æ), –∏ –±–æ—Ç —Å–º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –≤–∞–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!`,
          null,
          Markup.keyboard([
            Markup.button({
              action: {
                type: "open_link",
                link: "https://vk.com/im?media=&sel=-201031864",
                label: "–ù–∞–ø–∏—Å–∞—Ç—å",
              },
            }),
          ]).inline()
        );
      }
    });
    // LOOT USE
    bot.command(/^!use\s\[[\w]+\W@[\w-]+\]$/, async (ctx) => {
      const dropUser = ctx.message.text.match(/@[\w-]+/gi)[0].slice(1);
      try {
        const conversation = await bot.execute(
          "messages.getConversationMembers",
          {
            peer_id: ctx.message.peer_id,
          }
        );
        if (conversation.profiles.length < 2) {
          return ctx.reply("‚ò¢ –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö!");
        }
        showButtonsLoot(ctx.message.peer_id, dropUser);
      } catch (err) {
        console.error(err);
      }
    });
    bot.command(/^!use$/, async (ctx) => {
      const dropUser = ctx.message.fwd_messages[0];
      try {
        const conversation = await bot.execute(
          "messages.getConversationMembers",
          {
            peer_id: ctx.message.peer_id,
          }
        );
        if (conversation.profiles.length < 2) {
          return ctx.reply("‚ò¢ –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö!");
        }
        let user = {};
        if (!dropUser) {
          user = await getUser(ctx.message.from_id);
        } else {
          user = await getUser(dropUser.from_id);
        }
        showButtonsLoot(ctx.message.peer_id, user.screen_name);
      } catch (e) {
        console.error(e);
      }
    });
    //==========================================================================================
    // Action Buttons
    bot.event("message_new", async (ctx) => {
      // GET LOOT
      if (ctx.message.attachments.length) {
        const attachemnt = ctx.message.attachments[0];
        if (attachemnt.type === "photo") {
          const conversation = await bot.execute(
            "messages.getConversationMembers",
            {
              peer_id: ctx.message.peer_id,
            }
          );
          if (conversation.profiles.length > 1) {
            let randomItem = arLoot[getRandomInt(0, arLoot.length)];
            const user = await getUser(ctx.message.from_id);
            const roomID = ctx.message.peer_id;
            let existRoom = await room.findOne({ room: roomID });
            let existUser = existRoom.list.filter(
              (el) => el.user === user.screen_name
            )[0];

            if (existUser) {
              const pictures = existUser.pictures || [];
              if (pictures.includes(attachemnt.photo.id)) {
                return;
              }
              pictures.push(attachemnt.photo.id);
              await room.updateOne(
                { room: roomID, "list.user": user.screen_name },
                {
                  $set: {
                    "list.$.pictures": pictures,
                  },
                }
              );
            } else {
              let existRoom = await room.findOne({ room: roomID });
              if (!existRoom) {
                await room.create({
                  room: roomID,
                  list: [],
                });
              }
              await room.updateOne(
                { room: roomID },
                {
                  $push: {
                    list: {
                      user: user.screen_name,
                      firstName: user.first_name,
                      lastName: user.last_name,
                      respect: 0,
                      report: 0,
                      buff: {
                        weed: false,
                        beer: false,
                      },
                      inventory: {
                        glove: 0,
                        beer: 0,
                        weed: 0,
                      },
                      pictures: [attachemnt.photo.id],
                    },
                  },
                }
              );
            }

            if (randomItem !== null) {
              randomItem = randomItem[getRandomInt(0, randomItem.length)];
              existRoom = await room.findOne({
                room: roomID,
                "list.user": user.screen_name,
              });
              existUser = existRoom.list.filter(
                (el) => el.user === user.screen_name
              )[0];
              const inventory = {
                glove: existUser.inventory.glove || 0,
                beer: existUser.inventory.beer || 0,
                weed: existUser.inventory.weed || 0,
              };
              inventory[randomItem.name] += 1;
              await room.updateOne(
                { room: roomID, "list.user": user.screen_name },
                {
                  $set: {
                    "list.$.inventory": inventory,
                  },
                }
              );
              if (typeof existUser.buff.weed !== "boolean") {
                await room.updateOne(
                  { room: roomID, "list.user": user.screen_name },
                  {
                    $set: {
                      "list.$.buff": {
                        weed: false,
                        beer: false,
                      },
                    },
                  }
                );
              }
              return ctx.reply(
                `üôä ${user.first_name} ${
                  user.sex === 2 ? "–∑–∞–ª—É—Ç–∞–ª" : "–∑–∞–ª—É—Ç–∞–ª–∞"
                } –ø—Ä–µ–¥–º–µ—Ç (+1)`
              );
            }
          }
        }
      }
      if (ctx.message.payload) {
        function compare(a, b) {
          if (a.score > b.score) return -1;
          if (a.score === b.score) return 0;
          if (a.score < b.score) return 1;
        }
        async function endGame21(room, arDelRoom) {
          room.start = false;
          room.online = 0;
          let arTopPlayers = room.players.sort(compare);
          room.players = [];
          let winner = null;

          if (arTopPlayers[0].score === arTopPlayers[1].score) {
            const arPlayersEqual = arTopPlayers.filter(
              (el, idx, arr) => el.score === arr[0].score
            );
            winner = arPlayersEqual.reduce(
              (acc, current) => {
                if (new Date(acc.date) < new Date(current.date)) {
                  return acc;
                } else {
                  return current;
                }
              },
              [arPlayersEqual[1]]
            );
            await bot.sendMessage(
              conversationID,
              "üÉè –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –æ—á–∫–∏, –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–∞—Å–∫—Ä—ã–ª—Å—è"
            );
          } else {
            winner = arTopPlayers[0];
          }

          const user = await getUser(winner.user, "nom");
          const existTopPlayer = room.top.filter(
            (el) => el.user === winner.user
          )[0];

          if (!existTopPlayer) {
            room.top.push({
              user: winner.user,
              firstName: user.first_name,
              lastName: user.last_name,
              score: 1,
            });
          } else {
            const arDelPlayer = room.top.filter(
              (el) => el.user !== winner.user
            );
            const updatePlayer = {
              user: winner.user,
              firstName: user.first_name,
              lastName: user.last_name,
              score: existTopPlayer.score + 1,
            };
            room.top = [updatePlayer, ...arDelPlayer];
          }
          let newRooms = [room, ...arDelRoom];
          await bot.sendMessage(
            conversationID,
            `ü•á ${user.sex === 2 ? "–í—ã–∏–≥—Ä–∞–ª" : "–í—ã–∏–≥—Ä–∞–ª–∞"} ${user.first_name} ${
              user.last_name
            }`
          );
          await fs.writeFileSync(
            "./cards21.json",
            JSON.stringify(newRooms, null, 2)
          );
        }
        async function startRouletteGame(roll, callback = null) {
          try {
            function getBullet(players) {
              if (players < 3) return getRandomInt(1, 4);
              if (players === 3) return getRandomInt(1, 5);
              if (players > 3) return getRandomInt(1, 7);
            }
            const spam = await antiSpam(ctx, 2);
            if (spam) return;
            const user = await getUser(userID);
            const existRoom = await room.findOne({ room: conversationID });
            if (!existRoom)
              return ctx.reply(`üî´ ${user.first_name}, —Ç—ã –Ω–µ –≤–∑—è–ª —Ä–µ–≤–æ–ª—å–≤–µ—Ä!`);
            const players = existRoom.roulette.players;
            const existPlayer = players.filter((el) => el.user == userID)[0];
            if (!existPlayer)
              return ctx.reply(`üî´ ${user.first_name}, —Ç—ã –Ω–µ –≤–∑—è–ª —Ä–µ–≤–æ–ª—å–≤–µ—Ä!`);
            if (players.length < 2)
              return ctx.reply(
                `üî´ –ü–æ–¥–æ–∂–¥–∏ —Ö–æ—Ç—è –±—ã –µ—â–µ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –µ–º—É –Ω–∞–¥–æ –≤–∑—è—Ç—å —Ä–µ–≤–æ–ª—å–≤–µ—Ä!`
              );
            if (!existRoom.gameStarted) {
              await room.updateOne(
                { room: conversationID },
                {
                  $set: {
                    "roulette.gameStarted": true,
                  },
                }
              );
            }
            if (!existPlayer.bullet > 0 || roll) {
              await room.updateOne(
                { room: conversationID, "roulette.players.user": userID },
                {
                  $set: {
                    "roulette.players.$.bullet": getBullet(players.length),
                  },
                }
              );
            }

            if (callback !== null) {
              callback(getBullet(players.length));
            }
          } catch (err) {
            console.error(err);
            ctx.reply("‚ò¢ –ë–ª–∏–Ω –±–ª–∏–Ω—Å–∫–∏–π, —Å–±–æ–π –∫–∞–∫–æ–π-—Ç–æ [startRouletteGame]");
          }
        }
        const payload = JSON.parse(ctx.message.payload);
        const conversationID = ctx.message.peer_id;
        const userID = ctx.message.from_id;
        // LOOT ------------------------------------------------------------------
        async function useLoot(item, symbol, callback, callbackSelf) {
          try {
            const existRoom = await room.findOne({ room: conversationID });
            if (!existRoom)
              return ctx.reply(
                "üóø –ë–µ—Å–µ–¥–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –∫–∏–Ω—å—Ç–µ —Ä–µ—Å–ø–µ–∫—Ç/—Ä–µ–ø–æ—Ä—Ç –∏–ª–∏ –∑–∞–ª—É—Ç–∞–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç"
              );
            const sender = await getUser(userID);
            const existSender = existRoom.list.filter(
              (el) => el.user === sender.screen_name
            )[0];
            const existUser = existRoom.list.filter(
              (el) => el.user === payload.user
            )[0];
            if (!existSender)
              return ctx.reply(
                `üóø ${sender.first_name}, —Ç—ã –Ω–∞ –º–µ–ª–∏ (${symbol} 0 —à—Ç.)`
              );
            const inventorySender = existSender.inventory;
            if (!inventorySender[item])
              return ctx.reply(
                `üóø ${sender.first_name}, —Ç—ã –Ω–∞ –º–µ–ª–∏ (${symbol} 0 —à—Ç.)`
              );
            inventorySender[item] -= 1;
            await room
              .updateOne(
                { room: conversationID, "list.user": existSender.user },
                {
                  $set: {
                    "list.$.inventory": inventorySender,
                  },
                }
              )
              .then(async () => {
                if (!existSender.respect) {
                  await room.updateOne(
                    { room: conversationID, "list.user": existSender.user },
                    {
                      $set: {
                        "list.$.respect": 0,
                      },
                    }
                  );
                }
                if (!existSender.report) {
                  await room.updateOne(
                    { room: conversationID, "list.user": existSender.user },
                    {
                      $set: {
                        "list.$.report": 0,
                      },
                    }
                  );
                }
                if (!existUser.report) {
                  await room.updateOne(
                    { room: conversationID, "list.user": existUser.user },
                    {
                      $set: {
                        "list.$.report": 0,
                      },
                    }
                  );
                }
                if (!existUser.respect) {
                  await room.updateOne(
                    { room: conversationID, "list.user": existUser.user },
                    {
                      $set: {
                        "list.$.respect": 0,
                      },
                    }
                  );
                }
                const user = await getUser(payload.user);
                const owner = await getUser(existSender.user);
                const ownerGen = await getUser(existSender.user, "gen");

                if (existSender.user === payload.user) {
                  callbackSelf.call(null, existUser, user);
                } else {
                  callback.call(
                    null,
                    existSender,
                    existUser,
                    user,
                    owner,
                    ownerGen
                  );
                }
              });
          } catch (err) {
            console.error(err);
          }
        }
        if (payload.action === "throwGlove") {
          const spam = await antiSpam(ctx, 3);
          if (spam) return;
          await useLoot(
            "glove",
            "ü•ä",
            async (owner, user, existUser, sender, senderGen) => {
              if (!user) {
                return ctx.reply(
                  `ü§ß ${existUser.first_name} –ø–æ–ª—É—á–∏–ª –≤ —Ç—ã–∫–≤—É –æ—Ç ${senderGen.first_name}\nüò© ${owner.firstName} –Ω–∏—á–µ–≥–æ —Å —ç—Ç–æ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª`
                );
              }
              if (owner.buff.weed) {
                await room.updateOne(
                  { room: conversationID, "list.user": owner.user },
                  {
                    $set: {
                      "list.$.buff.weed": false,
                    },
                  }
                );
                return ctx.reply(
                  `${owner.firstName}, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –¥—Ä–∞—Ç—å—Å—è –∏–∑-–∑–∞ –¥—É—Ö–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏—è\nüò¥ ${owner.firstName} —É—à—ë–ª –æ—Ç—Å—ã–ø–∞—Ç—å—Å—è...`
                );
              }
              if (user.buff.weed === true && user.inventory.weed) {
                await room.updateOne(
                  { room: conversationID, "list.user": user.user },
                  {
                    $set: {
                      "list.$.respect": user.respect + 1,
                      "list.$.status": getStatus(
                        user.respect + 1,
                        user.report,
                        existUser
                      ),
                      "list.$.inventory.weed": user.inventory.weed - 1,
                    },
                  }
                );
                await room.updateOne(
                  { room: conversationID, "list.user": owner.user },
                  {
                    $set: {
                      "list.$.buff.weed": true,
                    },
                  }
                );
                const userGen = await getUser(user.user, "gen");
                return ctx.reply(
                  `${owner.firstName} –ø—Ä–∏–Ω—è–ª —Ä–∞—Å—Ç–∞—Ñ–∞—Ä–∞–π –æ—Ç ${userGen.first_name}\n${user.firstName} —É–≥–æ—Å—Ç–∏–ª —Ç—Ä–∞–≤–∫–æ–π üåøü§ô\n–†–µ–±—è—Ç–∞ –∑–Ω–∞—Ç–Ω–æ –ø–æ–¥—É–ª–∏...`
                );
              }
              if (user.buff.weed) {
                await room.updateOne(
                  { room: conversationID, "list.user": user.user },
                  {
                    $set: {
                      "list.$.buff.weed": false,
                    },
                  }
                );
                const userGen = await getUser(user.user, "gen");
                return ctx.reply(
                  `üòá ${owner.firstName} –ø–æ–ª—É—á–∏–ª –¥—É—Ö–æ–≤–Ω–æ–µ –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ –æ—Ç ${userGen.first_name}\n${user.firstName} —Ç–∞–∫ –¥–æ–ª–≥–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª –ø—Ä–æ –º–∏—Ä –≤–æ –≤—Å–µ–º –º–∏—Ä–µ, —á—Ç–æ –µ–≥–æ –∞–∂ –æ—Ç–ø—É—Å—Ç–∏–ª–æ`
                );
              }
              if (user.buff.beer && !owner.buff.beer) {
                const userGen = await getUser(user.user, "gen");
                await room.updateOne(
                  { room: conversationID, "list.user": owner.user },
                  {
                    $set: {
                      "list.$.report": owner.report + 1,
                      "list.$.status": getStatus(
                        owner.respect,
                        owner.report + 1,
                        sender
                      ),
                    },
                  }
                );
                await room.updateOne(
                  { room: conversationID, "list.user": user.user },
                  {
                    $set: {
                      "list.$.buff.beer": false,
                      "list.$.respect": user.respect + 1,
                      "list.$.status": getStatus(
                        user.respect + 1,
                        user.report,
                        existUser
                      ),
                    },
                  }
                );
                return ctx.reply(
                  `ü§ß ${owner.firstName} –ø–æ–ª—É—á–∏–ª –≤ –ø—É–∑–æ –æ—Ç –ø—å—è–Ω–æ–≥–æ-–º–∞—Å—Ç–µ—Ä–∞ ${userGen.first_name}\n–ü–∞—Ü–∞–Ω—ã —Å —Ä–∞–π–æ–Ω–∞ –¥–∞–ª–∏ –¥–∏–∑—Ä–µ—Å–ø–µ–∫—Ç üëé\n${user.firstName} –ø–æ–ª—É—á–∏–ª —Ä–µ—Å–ø–µ–∫—Ç ü§ô`
                );
              }
              if (!user.buff.beer && owner.buff.beer) {
                await room.updateOne(
                  { room: conversationID, "list.user": user.user },
                  {
                    $set: {
                      "list.$.report": user.report + 1,
                      "list.$.status": getStatus(
                        user.respect,
                        user.report + 1,
                        existUser
                      ),
                    },
                  }
                );
                await room.updateOne(
                  { room: conversationID, "list.user": owner.user },
                  {
                    $set: {
                      "list.$.buff.beer": false,
                      "list.$.respect": owner.respect + 1,
                      "list.$.status": getStatus(
                        owner.respect + 1,
                        owner.report,
                        sender
                      ),
                    },
                  }
                );
                return ctx.reply(
                  `ü§ß ${user.firstName} –ø–æ–ª—É—á–∏–ª –≤ –ø—É–∑–æ –æ—Ç –ø—å—è–Ω–æ–≥–æ-–º–∞—Å—Ç–µ—Ä–∞ ${senderGen.first_name}\n–ü–∞—Ü–∞–Ω—ã —Å —Ä–∞–π–æ–Ω–∞ –¥–∞–ª–∏ –¥–∏–∑—Ä–µ—Å–ø–µ–∫—Ç üëé\n${owner.firstName} –ø–æ–ª—É—á–∏–ª —Ä–µ—Å–ø–µ–∫—Ç ü§ô`
                );
              }
              if (user.buff.beer === true && owner.buff.beer === true) {
                await room.updateOne(
                  { room: conversationID, "list.user": user.user },
                  {
                    $set: {
                      "list.$.buff.beer": false,
                    },
                  }
                );
                await room.updateOne(
                  { room: conversationID, "list.user": owner.user },
                  {
                    $set: {
                      "list.$.buff.beer": false,
                    },
                  }
                );
                return ctx.reply(
                  `${user.firstName} –∏ ${owner.firstName} –±—É—Ö–∏–µ –æ—Ä–∞–ª–∏ –º–∞—Ç–æ–º –∏ ü•ä –¥—Ä–∞–ª–∏—Å—å –ø–æ–¥ –æ–∫–Ω–∞–º–∏\nüëµ –ë–∞–±–∫–∞ –≤—ã–∑–≤–∞–ª–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ üëÆ‚Äç‚ôÄüöî\n–ò–º –ø—Ä–∏—à–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å—Å—è —Å –º–µ—Å—Ç–∞ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è...`
                );
              }
              if (!user.respect) {
                if (user.inventory.glove) {
                  await room
                    .updateOne(
                      { room: conversationID, "list.user": user.user },
                      {
                        $set: {
                          "list.$.inventory.glove": user.inventory.glove - 1,
                        },
                      }
                    )
                    .then(() => {
                      return ctx.reply(
                        `–ù–∞—á–∞–ª–∞—Å—å —Å—É–µ—Ç–∞...—É –æ–±–æ–∏—Ö –µ—Å—Ç—å ü•ä\n–ù–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–∞—Ö–∞—á —Ä–∞–∑–Ω—è–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ üëÆ‚Äç‚ôÄüöî`
                      );
                    });
                }
                return ctx.reply(
                  `ü§ß ${user.firstName} –ø–æ–ª—É—á–∏–ª –≤ —Ç—ã–∫–≤—É –æ—Ç ${senderGen.first_name}\nüò© ${owner.firstName} –Ω–∏—á–µ–≥–æ —Å —ç—Ç–æ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª`
                );
              }
              if (user.inventory.glove) {
                const countOwner = getRandomInt(0, 2) * owner.inventory.glove;
                const countUser = getRandomInt(0, 2) * user.inventory.glove;
                async function userWin() {
                  await room.updateOne(
                    { room: conversationID, "list.user": user.user },
                    {
                      $set: {
                        "list.$.inventory.glove": user.inventory.glove - 1,
                        "list.$.respect": user.respect + 1,
                        "list.$.status": getStatus(
                          user.respect + 1,
                          user.report,
                          existUser
                        ),
                      },
                    }
                  );
                  await room
                    .updateOne(
                      { room: conversationID, "list.user": owner.user },
                      {
                        $set: {
                          "list.$.report": owner.report + 1,
                          "list.$.status": getStatus(
                            owner.respect,
                            owner.respect + 1,
                            sender
                          ),
                        },
                      }
                    )
                    .then(() => {
                      return ctx.reply(
                        `–ù–∞—á–∞–ª–∞—Å—å —Å—É–µ—Ç–∞...—É –æ–±–æ–∏—Ö –µ—Å—Ç—å ü•ä\nü§ß ${owner.firstName} –ø—Ä–æ–∏–≥—Ä–∞–ª –≤ –¥—Ä–∞–∫–µ... üëé\nüòé ${user.firstName} –ø–æ–ª—É—á–∏–ª —Ä–µ—Å–ø–µ–∫—Ç ü§ô`
                      );
                    });
                }
                if (countOwner > countUser) {
                  await ownerWin();
                } else if (countOwner < countUser) {
                  await userWin();
                } else {
                  if (getRandomInt(0, 2) === 0) {
                    await ownerWin();
                  } else {
                    await userWin();
                  }
                }
              } else {
                await ownerWin(
                  `ü§ß ${user.firstName} –ø–æ–ª—É—á–∏–ª –≤ —Ç—ã–∫–≤—É –æ—Ç ${senderGen.first_name}\nüòé ${owner.firstName} –æ—Ç–∂–∞–ª —Ä–µ—Å–ø–µ–∫—Ç ü§ô`
                );
              }
              async function ownerWin(mes = null) {
                await room.updateOne(
                  { room: conversationID, "list.user": owner.user },
                  {
                    $set: {
                      "list.$.respect": owner.respect + 1,
                      "list.$.status": getStatus(
                        owner.respect + 1,
                        owner.report,
                        sender
                      ),
                    },
                  }
                );
                await room
                  .updateOne(
                    { room: conversationID, "list.user": user.user },
                    {
                      $set: {
                        "list.$.inventory.glove": mes
                          ? 0
                          : user.inventory.glove - 1,
                        "list.$.respect": user.respect - 1,
                        "list.$.status": getStatus(
                          user.respect - 1,
                          user.report,
                          existUser
                        ),
                      },
                    }
                  )
                  .then(() => {
                    return ctx.reply(
                      mes ||
                        `–ù–∞—á–∞–ª–∞—Å—å —Å—É–µ—Ç–∞...—É –æ–±–æ–∏—Ö –µ—Å—Ç—å ü•ä\nü§ß ${user.firstName} –ø–æ–ª—É—á–∏–ª –≤ —Ç—ã–∫–≤—É –æ—Ç ${senderGen.first_name} üëé\nüòé ${owner.firstName} –æ—Ç–∂–∞–ª —Ä–µ—Å–ø–µ–∫—Ç ü§ô`
                    );
                  });
              }
            },
            async (existUser, user) => {
              await room
                .updateOne(
                  { room: conversationID, "list.user": existUser.user },
                  {
                    $set: {
                      "list.$.report": existUser.report + 1,
                      "list.$.status": getStatus(
                        existUser.respect,
                        existUser.report + 1,
                        user
                      ),
                    },
                  }
                )
                .then(() => {
                  return ctx.reply(
                    `ü§™ ${user.first_name} ${
                      user.sex === 2 ? "–Ω–∞—Å—Ç—É—á–∞–ª" : "–Ω–∞—Å—Ç—É—á–∞–ª–∞"
                    } —Å–µ–±–µ –ø–æ –º–æ—Ä–¥–µ üëé\nü§ïüöë –£–≤–µ–∑–ª–∏ –≤ –¥—É—Ä–∫—É...`
                  );
                });
            }
          );
        }
        if (payload.action === "throwBeer") {
          const spam = await antiSpam(ctx, 3);
          if (spam) return;
          await useLoot(
            "beer",
            "üçª",
            async (owner, user, existUser, sender, senderGen) => {
              if (!user) {
                return ctx.reply(
                  `üòï ${existUser.first_name} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç üçª –ø–∏–≤–∞—Å–∏–∫–∞ ${senderGen.first_name}`
                );
              }
              if (user.buff.beer) {
                const answer = [true, false];
                if (answer[getRandomInt(0, 2)] === false) {
                  return ctx.reply(
                    `ü•¥ ${existUser.first_name} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç üçª –ø–∏–≤–∞—Å–∏–∫–∞ ${senderGen.first_name}\n–í–∏–¥–∏–º–æ, —É–∂–µ –ø—å—è–Ω–µ–Ω—å–∫–∏–π...`
                  );
                } else {
                  await room.updateOne(
                    { room: conversationID, "list.user": user.user },
                    {
                      $set: {
                        "list.$.report": user.report + 1,
                        "list.$.status": getStatus(
                          user.respect,
                          user.report + 1,
                          existUser
                        ),
                        "list.$.buff.weed": false,
                        "list.$.buff.beer": false,
                      },
                    }
                  );
                  return ctx.reply(
                    `ü•¥ ${user.firstName} —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –µ—â—ë –±–∞—Ö–Ω—É—Ç—å\nü§¢ ${user.firstName} –ø–µ—Ä–µ–ø–∏–ª –ø–∏–≤–∞\nü§Æ –Ω–∞–±–ª—é–≤–∞–ª –≤ –±–µ—Å–µ–¥–µ üëé`
                  );
                }
              }
              if (user.inventory.beer) {
                if (owner.buff.beer && !user.buff.beer) {
                  await room.updateOne(
                    { room: conversationID, "list.user": owner.user },
                    {
                      $set: {
                        "list.$.buff.weed": false,
                        "list.$.buff.beer": false,
                        "list.$.report": owner.report + 1,
                        "list.$.status": getStatus(
                          owner.respect,
                          owner.report + 1,
                          sender
                        ),
                      },
                    }
                  );
                  await room.updateOne(
                    { room: conversationID, "list.user": user.user },
                    {
                      $set: {
                        "list.$.buff.weed": false,
                        "list.$.buff.beer": true,
                        "list.$.inventory.beer": user.inventory.beer - 1,
                      },
                    }
                  );
                  return ctx.reply(
                    `–£ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏ —Å–µ–±–µ üçª\nü•¥ ${owner.firstName} –∏ ${user.firstName} –Ω–∞–∂—Ä–∞–ª–∏—Å—å\nü§¢ ${owner.firstName} –ø–µ—Ä–µ–ø–∏–ª\nü§Æ –Ω–∞–±–ª—é–≤–∞–ª –≤ –±–µ—Å–µ–¥–µ üëé`
                  );
                }
                if (!owner.buff.beer && user.buff.beer) {
                  await room.updateOne(
                    { room: conversationID, "list.user": user.user },
                    {
                      $set: {
                        "list.$.buff.weed": false,
                        "list.$.buff.beer": false,
                        "list.$.report": user.report + 1,
                        "list.$.status": getStatus(
                          user.respect,
                          user.report + 1,
                          existUser
                        ),
                        "list.$.inventory.beer": user.inventory.beer - 1,
                      },
                    }
                  );
                  await room.updateOne(
                    { room: conversationID, "list.user": owner.user },
                    {
                      $set: {
                        "list.$.buff.weed": false,
                        "list.$.buff.beer": true,
                      },
                    }
                  );
                  return ctx.reply(
                    `–£ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏ —Å–µ–±–µ üçª\nü•¥ ${owner.firstName} –∏ ${user.firstName} –Ω–∞–∂—Ä–∞–ª–∏—Å—å\nü§¢ ${user.firstName} –ø–µ—Ä–µ–ø–∏–ª\nü§Æ –Ω–∞–±–ª—é–≤–∞–ª –≤ –±–µ—Å–µ–¥–µ üëé`
                  );
                }
                if (owner.buff.beer === true && user.buff.beer === true) {
                  await room.updateOne(
                    { room: conversationID, "list.user": user.user },
                    {
                      $set: {
                        "list.$.buff.weed": false,
                        "list.$.buff.beer": false,
                        "list.$.report": user.report + 1,
                        "list.$.status": getStatus(
                          user.respect,
                          user.report + 1,
                          existUser
                        ),
                        "list.$.inventory.beer": user.inventory.beer - 1,
                      },
                    }
                  );
                  await room.updateOne(
                    { room: conversationID, "list.user": owner.user },
                    {
                      $set: {
                        "list.$.buff.weed": false,
                        "list.$.buff.beer": false,
                        "list.$.report": owner.report + 1,
                        "list.$.status": getStatus(
                          owner.respect,
                          owner.report + 1,
                          sender
                        ),
                      },
                    }
                  );
                  return ctx.reply(
                    `–£ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏ —Å–µ–±–µ üçª\nü•¥ ${owner.firstName} –∏ ${user.firstName} –Ω–∞–∂—Ä–∞–ª–∏—Å—å\nü§¢ –†–µ–±—è—Ç–∞ –ø–µ—Ä–µ–ø–∏–ª–∏\nü§Æ –Ω–∞–±–ª—é–≤–∞–ª–∏ –≤ –±–µ—Å–µ–¥–µ üëé`
                  );
                }
                await room.updateOne(
                  { room: conversationID, "list.user": user.user },
                  {
                    $set: {
                      "list.$.buff.weed": false,
                      "list.$.buff.beer": true,
                      "list.$.inventory.beer": user.inventory.beer - 1,
                    },
                  }
                );
                await room.updateOne(
                  { room: conversationID, "list.user": owner.user },
                  {
                    $set: {
                      "list.$.buff.weed": false,
                      "list.$.buff.beer": true,
                    },
                  }
                );
                return ctx.reply(
                  `–£ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏ —Å–µ–±–µ üçª\nü•¥ ${owner.firstName} –∏ ${user.firstName} –Ω–∞–∂—Ä–∞–ª–∏—Å—å`
                );
              }
              if (user.respect) {
                await room.updateOne(
                  { room: conversationID, "list.user": user.user },
                  {
                    $set: {
                      "list.$.respect": user.respect - 1,
                      "list.$.status": getStatus(
                        user.respect - 1,
                        user.report,
                        existUser
                      ),
                      "list.$.inventory.beer": user.inventory.beer + 1,
                    },
                  }
                );
                await room.updateOne(
                  { room: conversationID, "list.user": owner.user },
                  {
                    $set: {
                      "list.$.respect": owner.respect + 1,
                      "list.$.status": getStatus(
                        owner.respect + 1,
                        owner.report,
                        sender
                      ),
                    },
                  }
                );
                return ctx.reply(
                  `ü§ë ${user.firstName} –∫—É–ø–∏–ª üçª —É ${senderGen.first_name} –∑–∞ —Ä–µ—Å–ø–µ–∫—Ç`
                );
              } else {
                if (user.buff.beer) {
                  await room.updateOne(
                    { room: conversationID, "list.user": user.user },
                    {
                      $set: {
                        "list.$.buff.weed": false,
                        "list.$.buff.beer": false,
                        "list.$.report": user.report + 1,
                        "list.$.status": getStatus(
                          user.respect + 1,
                          user.report + 1,
                          existUser
                        ),
                      },
                    }
                  );
                  return ctx.reply(
                    `ü•¥ ${user.firstName} –∑–Ω–∞—Ç–Ω–æ –Ω–∞–±—É—Ö–∞–ª—Å—è —É ${senderGen.first_name}\nü§Æ ${user.firstName} –Ω–∞–±–ª—é–≤–∞–ª –Ω–∞ —Ö–∞—Ç–µ üëé`
                  );
                } else {
                  await room.updateOne(
                    { room: conversationID, "list.user": user.user },
                    {
                      $set: {
                        "list.$.buff.weed": false,
                        "list.$.buff.beer": true,
                      },
                    }
                  );
                  return ctx.reply(
                    `ü•¥ ${user.firstName} –±–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞–ø–∏–ª—Å—è —É ${senderGen.first_name}`
                  );
                }
              }
            },
            async (existUser, user) => {
              if (existUser.buff.beer) {
                await room.updateOne(
                  { room: conversationID, "list.user": existUser.user },
                  {
                    $set: {
                      "list.$.report": existUser.report + 1,
                      "list.$.status": getStatus(
                        existUser.respect,
                        existUser.report + 1,
                        user
                      ),
                      "list.$.buff.weed": false,
                      "list.$.buff.beer": false,
                    },
                  }
                );
                return ctx.reply(
                  `ü§¢ ${existUser.firstName} –ø–µ—Ä–µ–ø–∏–ª –ø–∏–≤–∞\nü§Æ –Ω–∞–±–ª—é–≤–∞–ª –≤ –±–µ—Å–µ–¥–µ üëé`
                );
              } else {
                await room.updateOne(
                  { room: conversationID, "list.user": existUser.user },
                  {
                    $set: {
                      "list.$.buff.beer": true,
                      "list.$.buff.weed": false,
                    },
                  }
                );
                return ctx.reply(
                  `üçª ${existUser.firstName} –±–∞—Ö–Ω—É–ª —Ö–æ—Ä–æ—à–µ–≥–æ –ø–∏–≤–∫–∞\nü•¥ –í –¥—Ä–∞–∫–µ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –±–æ–¥—Ä–æ`
                );
              }
            }
          );
        }
        if (payload.action === "throwWeed") {
          const spam = await antiSpam(ctx, 3);
          if (spam) return;
          await useLoot(
            "weed",
            "üåø",
            async (owner, user, existUser, sender, senderGen) => {
              if (!user) {
                return ctx.reply(
                  `üòï ${existUser.first_name} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç üåø —Å—Ç–∞—Ñ—Ñ–∞ ${senderGen.first_name}`
                );
              }
              if (user.inventory.weed) {
                if (owner.buff.weed && !user.buff.weed) {
                  await room.updateOne(
                    { room: conversationID, "list.user": owner.user },
                    {
                      $set: {
                        "list.$.buff.weed": false,
                        "list.$.buff.beer": false,
                      },
                    }
                  );
                  await room.updateOne(
                    { room: conversationID, "list.user": user.user },
                    {
                      $set: {
                        "list.$.buff.weed": true,
                        "list.$.buff.beer": false,
                        "list.$.inventory.weed": user.inventory.weed - 1,
                      },
                    }
                  );
                  return ctx.reply(
                    `–£ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏ —Å–µ–±–µ üåø\nü§§ ${owner.firstName} –∏ ${user.firstName} –Ω–∞—á–∞–ª–∏ –¥—É—Ç—å\n${owner.firstName} –ø–µ—Ä–µ–∫—É—Ä–∏–ª –∏ –≤—ã—Ä—É–±–∏–ª—Å—è üò¥ —Å–ø–∞—Ç—å\nüòü —Å–Ω—è–ª–∏—Å—å –≤—Å–µ –±–∞—Ñ—ã`
                  );
                }
                if (!owner.buff.weed && user.buff.weed) {
                  await room.updateOne(
                    { room: conversationID, "list.user": user.user },
                    {
                      $set: {
                        "list.$.buff.weed": false,
                        "list.$.buff.beer": false,
                        "list.$.inventory.weed": user.inventory.weed - 1,
                      },
                    }
                  );
                  await room.updateOne(
                    { room: conversationID, "list.user": owner.user },
                    {
                      $set: {
                        "list.$.buff.weed": true,
                        "list.$.buff.beer": false,
                      },
                    }
                  );
                  return ctx.reply(
                    `–£ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏ —Å–µ–±–µ üåø\nü§§ ${owner.firstName} –∏ ${user.firstName} –Ω–∞—á–∞–ª–∏ –¥—É—Ç—å\n${user.firstName} –ø–µ—Ä–µ–∫—É—Ä–∏–ª –∏ –≤—ã—Ä—É–±–∏–ª—Å—è üò¥ —Å–ø–∞—Ç—å\nüòü —Å–Ω—è–ª–∏—Å—å –≤—Å–µ –±–∞—Ñ—ã`
                  );
                }
                if (owner.buff.weed === true && user.buff.weed === true) {
                  await room.updateOne(
                    { room: conversationID, "list.user": user.user },
                    {
                      $set: {
                        "list.$.buff.weed": false,
                        "list.$.buff.beer": false,
                        "list.$.inventory.weed": user.inventory.weed - 1,
                      },
                    }
                  );
                  await room.updateOne(
                    { room: conversationID, "list.user": owner.user },
                    {
                      $set: {
                        "list.$.buff.weed": false,
                        "list.$.buff.beer": false,
                      },
                    }
                  );
                  return ctx.reply(
                    `–£ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏ —Å–µ–±–µ üåø\nü§§ ${owner.firstName} –∏ ${user.firstName} –Ω–∞—á–∞–ª–∏ –¥—É—Ç—å\n–†–µ–±—è—Ç —Å–∏–ª—å–Ω–æ –Ω–∞–∫—É–º–∞—Ä–∏–ª–æ, –∏ –æ–Ω–∏ –≤—ã—Ä—É–±–∏–ª–∏—Å—å üò¥ —Å–ø–∞—Ç—å\nüòü —É –Ω–∏—Ö —Å–Ω—è–ª–∏—Å—å –≤—Å–µ –±–∞—Ñ—ã`
                  );
                }
                await room.updateOne(
                  { room: conversationID, "list.user": user.user },
                  {
                    $set: {
                      "list.$.buff.weed": true,
                      "list.$.buff.beer": false,
                      "list.$.inventory.weed": user.inventory.weed - 1,
                    },
                  }
                );
                await room.updateOne(
                  { room: conversationID, "list.user": owner.user },
                  {
                    $set: {
                      "list.$.buff.weed": true,
                      "list.$.buff.beer": false,
                    },
                  }
                );
                return ctx.reply(
                  `–£ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏ —Å–µ–±–µ üåø\nü§§ ${owner.firstName} –∏ ${user.firstName} —Å–ª–∞–¥–∫–æ –¥—É–Ω—É–ª–∏`
                );
              }

              if (user.respect) {
                await room.updateOne(
                  { room: conversationID, "list.user": user.user },
                  {
                    $set: {
                      "list.$.respect": user.respect - 1,
                      "list.$.status": getStatus(
                        user.respect - 1,
                        user.report,
                        existUser
                      ),
                      "list.$.inventory.weed": user.inventory.weed + 1,
                    },
                  }
                );
                await room.updateOne(
                  { room: conversationID, "list.user": owner.user },
                  {
                    $set: {
                      "list.$.respect": owner.respect + 1,
                      "list.$.status": getStatus(
                        owner.respect + 1,
                        owner.report,
                        sender
                      ),
                    },
                  }
                );
                return ctx.reply(
                  `ü§ë ${user.firstName} –∫—É–ø–∏–ª üåø —Å—Ç–∞—Ñ—Ñ —É ${senderGen.first_name} –∑–∞ —Ä–µ—Å–ø–µ–∫—Ç`
                );
              } else {
                if (user.buff.weed) {
                  await room.updateOne(
                    { room: conversationID, "list.user": user.user },
                    {
                      $set: {
                        "list.$.buff.weed": false,
                        "list.$.buff.beer": false,
                      },
                    }
                  );
                  return ctx.reply(
                    `ü•≥ ${user.firstName} –∑–Ω–∞—Ç–Ω–æ –ø–æ–¥–∫—É—Ä–∏–ª—Å—è —É ${senderGen.first_name}\n${user.firstName} –Ω–µ –≤—ã–¥–µ—Ä–∂–∏–ª, –∏ –≤—ã—Ä—É–±–∏–ª—Å—è üò¥ —Å–ø–∞—Ç—å\nüòü —Å–Ω—è–ª–∏—Å—å –≤—Å–µ –±–∞—Ñ—ã`
                  );
                } else {
                  await room.updateOne(
                    { room: conversationID, "list.user": user.user },
                    {
                      $set: {
                        "list.$.buff.weed": true,
                        "list.$.buff.beer": false,
                      },
                    }
                  );
                  return ctx.reply(
                    `ü•≥ ${user.firstName} –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–¥–∫—É—Ä–∏–ª—Å—è —É ${senderGen.first_name}`
                  );
                }
              }
            },
            async (existUser, user) => {
              if (existUser.buff.weed) {
                await room.updateOne(
                  { room: conversationID, "list.user": existUser.user },
                  {
                    $set: {
                      "list.$.buff.weed": false,
                      "list.$.buff.beer": false,
                    },
                  }
                );
                return ctx.reply(
                  `ü§§ ${existUser.firstName} –ø–µ—Ä–µ–∫—É—Ä–∏–ª, –∏ –≤—ã—Ä—É–±–∏–ª—Å—è üò¥ —Å–ø–∞—Ç—å\nüòü —Å–Ω—è–ª–∏—Å—å –≤—Å–µ –±–∞—Ñ—ã`
                );
              } else {
                await room.updateOne(
                  { room: conversationID, "list.user": existUser.user },
                  {
                    $set: {
                      "list.$.buff.beer": false,
                      "list.$.buff.weed": true,
                    },
                  }
                );
                return ctx.reply(
                  `üòú ${existUser.firstName} –¥—É–Ω—É–ª —Ö–æ—Ä–æ—à–µ–≥–æ üåø —Å—Ç–∞—Ñ—Ñ–∞\n‚òÄ –ø—Ä–∏–Ω—è–ª —Ä–∞—Å—Ç–∞—Ñ–∞—Ä–∞–π`
                );
              }
            }
          );
        }
        // –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞ ------------------------------------------------------------------
        if (payload.action === "takeRoulette") {
          try {
            const { profiles } = await bot.execute(
              "messages.getConversationMembers",
              {
                peer_id: ctx.message.peer_id,
              }
            );
            if (profiles.length === 1)
              return ctx.reply("‚ò¢ –ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –±–µ—Å–µ–¥!");

            let existRoom = await room.findOne({ room: conversationID });
            if (!existRoom) {
              await room.create({
                room: conversationID,
              });
              existRoom = await room.findOne({ room: conversationID });
            }
            const players = existRoom.roulette.players;
            const gameStarted = existRoom.roulette.gameStarted;
            const existPlayer = players.filter((el) => el.user == userID)[0];
            if (!existPlayer && gameStarted)
              return ctx.reply("üî´ –ò–≥—Ä–æ–∫–∏ –∏–≥—Ä–∞—é—Ç, –ø–æ–¥–æ–∂–¥–∏...");
            const user = await getUser(userID);
            if (!existPlayer) {
              room
                .updateOne(
                  { room: conversationID },
                  {
                    $push: {
                      "roulette.players": {
                        user: userID,
                        bullet: 0,
                        shot: false,
                      },
                    },
                  }
                )
                .then(() => {
                  ctx.reply(
                    `üî´ ${
                      user.first_name
                    } –≤—Å—Ç—É–ø–∏–ª –≤ –∏–≥—Ä—É! \n (–æ–Ω–ª–∞–π–Ω ‚Äî ${++players.length} —á–µ–ª.)`
                  );
                });
            } else {
              ctx.reply(`üî´ ${user.first_name}, —Ç—ã —É–∂–µ –≤–∑—è–ª —Ä–µ–≤–æ–ª—å–≤–µ—Ä!`);
            }
          } catch (err) {
            if (err.response.error_code === 917) {
              return ctx.reply("‚ò¢ –î–ª—è –∏–≥—Ä—ã, –±–æ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–¥–º–∏–Ω–∫–∞!");
            }
            ctx.reply("‚ò¢ –ë–ª–∏–Ω –±–ª–∏–Ω—Å–∫–∏–π, —Å–±–æ–π –∫–∞–∫–æ–π-—Ç–æ [takeRoulette]");
          }
        }
        if (payload.action === "rouletteRoll") {
          startRouletteGame(true);
        }
        if (payload.action === "rouletteShoot") {
          startRouletteGame(false, async (bullet) => {
            try {
              const genUser = await getUser(userID, "gen");
              const user = await getUser(userID);
              let currentRoom = await room.findOne({ room: conversationID });
              let currentBullet = currentRoom.roulette.bullet || 0;
              if (currentBullet === 0) {
                await room.updateOne(
                  { room: conversationID },
                  {
                    $set: {
                      "roulette.bullet": bullet,
                    },
                  }
                );
              }
              currentRoom = await room.findOne({ room: conversationID });
              currentBullet = currentRoom.roulette.bullet;
              const players = currentRoom.roulette.players;
              const currentPlayer = players.filter(
                (el) => el.user == userID
              )[0];

              if (currentPlayer.shot)
                return ctx.reply(
                  `üî´ ${user.first_name}, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –¥—Ä—É–≥–∏—Ö, –Ω–µ –≤—Å–µ —É—Å–ø–µ–ª–∏ —Å—Ç—Ä–µ–ª—å–Ω—É—Ç—å!`
                );

              await room.updateOne(
                { room: conversationID, "roulette.players.user": userID },
                {
                  $set: {
                    "roulette.players.$.shot": true,
                  },
                }
              );

              currentRoom = await room.findOne({ room: conversationID });
              const notShotPlayers = currentRoom.roulette.players.filter(
                (el) => !el.shot
              );

              if (currentPlayer.bullet !== currentBullet) {
                ctx.reply(`üé∞ ${genUser.first_name} –ø—Ä–æ–Ω–µ—Å–ª–æ...`);
                if (notShotPlayers.length === 0) {
                  await room.updateOne(
                    { room: conversationID },
                    {
                      $set: {
                        "roulette.bullet": 0,
                      },
                    }
                  );
                  currentRoom.roulette.players.forEach(async (player) => {
                    await room.updateOne(
                      {
                        room: conversationID,
                        "roulette.players.user": player.user,
                      },
                      {
                        $set: {
                          "roulette.players.$.shot": false,
                        },
                      }
                    );
                  });
                  ctx.reply(`ü§µ –í–∞–º –≤–µ–∑—ë—Ç, —Å—Ç—Ä–µ–ª—è–π—Ç–µ –µ—â–µ —Ä–∞–∑!`);
                }
              } else {
                const arPlayersExceptCurrent = currentRoom.roulette.players.filter(
                  (el) => el.user != userID
                );
                await room.updateOne(
                  { room: conversationID },
                  {
                    $set: {
                      "roulette.players": arPlayersExceptCurrent,
                    },
                  }
                );
                currentRoom = await room.findOne({ room: conversationID });
                const notShotPlayers = currentRoom.roulette.players.filter(
                  (el) => !el.shot
                );

                ctx.reply(`${user.first_name} —É–º–µ—Ä... ‚ö∞ üò¢üò≠`);

                if (notShotPlayers.length === 0) {
                  await room.updateOne(
                    { room: conversationID },
                    {
                      $set: {
                        "roulette.bullet": 0,
                      },
                    }
                  );
                  currentRoom.roulette.players.forEach(async (player) => {
                    await room.updateOne(
                      {
                        room: conversationID,
                        "roulette.players.user": player.user,
                      },
                      {
                        $set: {
                          "roulette.players.$.shot": false,
                        },
                      }
                    );
                  });
                }
                if (currentRoom.roulette.players.length === 1) {
                  const winner = currentRoom.roulette.players[0];
                  await room.updateOne(
                    { room: conversationID },
                    {
                      $set: {
                        roulette: {
                          gameStarted: false,
                          bullet: 0,
                          players: [],
                          top: [...currentRoom.roulette.top],
                        },
                      },
                    }
                  );
                  currentRoom = await room.findOne({ room: conversationID });
                  async function createTopList() {
                    await room.updateOne(
                      { room: conversationID },
                      {
                        $push: {
                          "roulette.top": {
                            user: winner.user,
                            score: 1,
                          },
                        },
                      }
                    );
                  }
                  if (currentRoom.roulette.top.length > 0) {
                    const existPlayerInTop = currentRoom.roulette.top.filter(
                      (player) => player.user === winner.user
                    )[0];
                    if (existPlayerInTop) {
                      await room.updateOne(
                        {
                          room: conversationID,
                          "roulette.top.user": winner.user,
                        },
                        {
                          $set: {
                            "roulette.top.$.score": existPlayerInTop.score + 1,
                          },
                        }
                      );
                    } else {
                      await createTopList();
                    }
                  } else {
                    await createTopList();
                  }
                  const user = await getUser(+winner.user);
                  ctx.reply(
                    `üèÖ ${user.first_name} ${user.last_name} –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –∫–æ–º–Ω–∞—Ç—ã –∂–∏–≤—ã–º`
                  );
                }
              }
            } catch (err) {
              console.error(err);
              ctx.reply("‚ò¢ –ë–ª–∏–Ω –±–ª–∏–Ω—Å–∫–∏–π, —Å–±–æ–π –∫–∞–∫–æ–π-—Ç–æ [rouletteShoot]");
            }
          });
        }
        if (payload.action === "rouletteTop") {
          const spam = await antiSpam(ctx, 3);
          if (spam) return;
          const currentRoom = await room.findOne({ room: conversationID });
          if (!currentRoom) return ctx.reply("üìú –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç...");
          const list = currentRoom.roulette.top;
          if (list.length < 1) return ctx.reply("üìú –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç...");
          const arTopPlayers = list.sort(compare);
          let topList = [];
          for (let player of arTopPlayers) {
            const user = await getUser(+player.user);
            topList.push({
              first_name: user.first_name,
              last_name: user.last_name,
              score: player.score,
            });
          }
          const formatedTopList = topList.map((player, idx) => {
            return `${idx + 1}. ${player.first_name} ${player.last_name} - ${
              player.score
            }\n`;
          });
          ctx.reply(`üìú –¢–æ–ø üî´ —Ä—É—Å—Å–∫–æ–π —Ä—É–ª–µ—Ç–∫–∏\n${formatedTopList.join("")}`);
        }
        // 21 --------------------------------------------------------------------------------
        if (payload.action === "takeCards") {
          try {
            const rooms = JSON.parse(
              fs.readFileSync("./cards21.json", "utf-8")
            );
            const neededRoom = rooms.filter(
              (el) => el.room === conversationID
            )[0];
            let cardOne = arCards21[getRandomInt(0, arCards21.length)];
            let cardTwo = arCards21[getRandomInt(0, arCards21.length)];

            while (cardOne.name === "A" && cardTwo.name === "A") {
              cardOne = arCards21[getRandomInt(0, arCards21.length)];
              cardTwo = arCards21[getRandomInt(0, arCards21.length)];
            }

            if (!neededRoom) {
              rooms.push({
                room: conversationID,
                start: false,
                online: 1,
                players: [
                  {
                    user: userID,
                    cards: [`[${cardOne.name}]`, `[${cardTwo.name}]`],
                    score: cardOne.score + cardTwo.score,
                  },
                ],
                top: [],
              });
              await bot.sendMessage(
                userID,
                `-------\n[${cardOne.name}] [${cardTwo.name}]`
              );
              fs.writeFileSync(
                "./cards21.json",
                JSON.stringify(rooms, null, 2)
              );
            } else {
              const players = neededRoom.players;
              const existPlayer = players.filter((el) => el.user === userID)[0];
              if (existPlayer) {
                const user = await getUser(userID, "nom");
                return ctx.reply(
                  `üÉè ${user.first_name}, —Ç—ã —É–∂–µ –≤–∑—è–ª –∫–∞—Ä—Ç—ã!`,
                  null,
                  Markup.keyboard([
                    Markup.button({
                      action: {
                        type: "text",
                        payload: JSON.stringify({
                          action: "showCards",
                        }),
                        label: "–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—ã",
                      },
                    }),
                  ]).inline()
                );
              }
              if (neededRoom.start)
                return ctx.reply("üÉè –ò–≥—Ä–æ–∫–∏ –∏–≥—Ä–∞—é—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...");

              await bot.sendMessage(
                ctx.message.from_id,
                `-------\n[${cardOne.name}] [${cardTwo.name}]`
              );

              neededRoom.players.push({
                user: userID,
                cards: [`[${cardOne.name}]`, `[${cardTwo.name}]`],
                score: cardOne.score + cardTwo.score,
              });
              neededRoom.online += 1;
              const arDelRoom = rooms.filter(
                (el) => el.room !== conversationID
              );
              const newRooms = [neededRoom, ...arDelRoom];
              fs.writeFileSync(
                "./cards21.json",
                JSON.stringify(newRooms, null, 2)
              );
            }
          } catch (err) {
            console.error(err);
            bot.sendMessage(
              conversationID,
              `üÉè –ù–∞–ø–∏—à–∏ –±–æ—Ç—É –≤ –ª—Å (—á—Ç–æ —É–≥–æ–¥–Ω–æ), –∏ —Ç–æ–≥–¥–∞ —Å–º–æ–∂–µ—à—å –±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã`,
              null,
              Markup.keyboard([
                Markup.button({
                  action: {
                    type: "open_link",
                    link: "https://vk.com/im?media=&sel=-201031864",
                    label: "–ù–∞–ø–∏—Å–∞—Ç—å",
                  },
                }),
              ]).inline()
            );
          }
        }
        if (payload.action === "takeCard") {
          try {
            const rooms = JSON.parse(
              fs.readFileSync("./cards21.json", "utf-8")
            );
            const neededRoom = rooms.filter(
              (el) => el.room === conversationID
            )[0];
            const user = await getUser(userID, "nom");

            let arPlayers = [];
            let existPlayer = null;

            if (neededRoom) {
              arPlayers = neededRoom.players;
              existPlayer = arPlayers.filter((el) => el.user === userID)[0];
            }
            if (!existPlayer) {
              return ctx.reply(
                `üÉè ${user.first_name}, —Ç—ã –Ω–µ ${
                  user.sex === 2 ? "–≤–∑—è–ª" : "–≤–∑—è–ª–∞"
                } –∫–∞—Ä—Ç—ã!`,
                null,
                Markup.keyboard([
                  Markup.button({
                    action: {
                      type: "text",
                      payload: JSON.stringify({
                        action: "takeCards",
                      }),
                      label: "–í–∑—è—Ç—å –∫–∞—Ä—Ç—ã",
                    },
                  }),
                ]).inline()
              );
            }
            if (arPlayers.length < 2) {
              return ctx.reply(
                `üÉè –î–æ–∂–¥–∏—Å—å —Ö–æ—Ç—è –±—ã –µ—â–µ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –µ–º—É –Ω–∞–¥–æ –≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã`
              );
            }
            if (existPlayer.score === 0) {
              return ctx.reply(
                `üÉè ${user.first_name}, —Ç—ã –ª–æ—Ö, –Ω–µ –º–æ–∂–µ—à—å –±—Ä–∞—Ç—å`
              );
            }

            const newCard = arCards21[getRandomInt(0, arCards21.length)];
            const scorePlayer = existPlayer.score + newCard.score;
            const cardsPlayer = [...existPlayer.cards, `[${newCard.name}]`];
            let updatePlayer = {
              user: userID,
              cards: cardsPlayer,
              score: scorePlayer,
            };
            const arDelPlayer = arPlayers.filter((el) => el.user !== userID);
            const arDelRoom = rooms.filter((el) => el.room !== conversationID);

            await bot.sendMessage(userID, `[${newCard.name}]`);

            neededRoom.start = true;

            if (scorePlayer > 21) {
              updatePlayer = {
                user: userID,
                cards: cardsPlayer,
                score: 0,
              };
              neededRoom.players = [updatePlayer, ...arDelPlayer];
              neededRoom.online -= 1;
              let newRooms = [neededRoom, ...arDelRoom];
              await bot.sendMessage(
                conversationID,
                `üÉè ${user.first_name} ‚Äî –ª–æ—Ö, –ø–µ—Ä–µ–±–æ—Ä ${scorePlayer}`
              );

              if (neededRoom.online < 1) {
                return await endGame21(neededRoom, arDelRoom);
              }

              fs.writeFileSync(
                "./cards21.json",
                JSON.stringify(newRooms, null, 2)
              );
            } else {
              neededRoom.players = [updatePlayer, ...arDelPlayer];
              let newRooms = [neededRoom, ...arDelRoom];
              fs.writeFileSync(
                "./cards21.json",
                JSON.stringify(newRooms, null, 2)
              );
            }
          } catch (err) {
            console.error(err);
            ctx.reply("&#9762; –ë–ª–∏–Ω –±–ª–∏–Ω—Å–∫–∏–π, —Å–±–æ–π –∫–∞–∫–æ–π-—Ç–æ [takeCard]");
          }
        }
        if (payload.action === "giveTop") {
          const rooms = JSON.parse(fs.readFileSync("./cards21.json", "utf-8"));
          const neededRoom = rooms.filter(
            (el) => el.room === conversationID
          )[0];
          if (!neededRoom) {
            return ctx.reply(`üìú –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç...`);
          }
          const arTopPlayers = neededRoom.top.sort(compare);
          if (arTopPlayers.length < 1) {
            return ctx.reply(`üìú –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç...`);
          }
          const arTopPlayerList = arTopPlayers.map((el, idx) => {
            return `${idx + 1}. ${el.firstName} ${el.lastName} - ${el.score}\n`;
          });
          return ctx.reply(`üìú –¢–æ–ø —á–µ–ª–æ–≤ –≤ üéØ 21\n${arTopPlayerList.join("")}`);
        }
        if (payload.action === "showCards") {
          try {
            const rooms = JSON.parse(
              fs.readFileSync("./cards21.json", "utf-8")
            );
            const neededRoom = rooms.filter(
              (el) => el.room === conversationID
            )[0];
            const user = await getUser(userID, "nom");

            let arPlayers = [];
            let existPlayer = null;

            if (neededRoom) {
              arPlayers = neededRoom.players;
              existPlayer = arPlayers.filter((el) => el.user === userID)[0];
            }
            if (!existPlayer) {
              return ctx.reply(
                `üÉè ${user.first_name}, —Ç—ã –Ω–µ ${
                  user.sex === 2 ? "–≤–∑—è–ª" : "–≤–∑—è–ª–∞"
                } –∫–∞—Ä—Ç—ã!`,
                null,
                Markup.keyboard([
                  Markup.button({
                    action: {
                      type: "text",
                      payload: JSON.stringify({
                        action: "takeCards",
                      }),
                      label: "–í–∑—è—Ç—å –∫–∞—Ä—Ç—ã",
                    },
                  }),
                ]).inline()
              );
            }
            if (arPlayers.length < 2) {
              return ctx.reply(
                `üÉè –î–æ–∂–¥–∏—Å—å —Ö–æ—Ç—è –±—ã –µ—â–µ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –µ–º—É –Ω–∞–¥–æ –≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã`
              );
            }
            if (existPlayer.show) {
              return ctx.reply(
                `üÉè ${user.first_name}, —Ç—ã —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã!`
              );
            }

            const cards = existPlayer.cards.join(" ");
            const arDelRoom = rooms.filter((el) => el.room !== conversationID);

            neededRoom.players.forEach((el) => {
              if (el.user === userID) {
                el.show = true;
                el.date = new Date();
              }
            });

            if (existPlayer.score === 0) {
              await bot.sendMessage(
                conversationID,
                `${user.first_name} ${
                  user.sex === 2 ? "–ø—Ä–æ–∏–≥—Ä–∞–ª" : "–ø—Ä–æ–∏–≥—Ä–∞–ª–∞"
                } —Å —Ç–∞–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏ ${cards}`
              );
              fs.writeFileSync(
                "./cards21.json",
                JSON.stringify([neededRoom[0], ...arDelRoom], null, 2)
              );
            } else if (existPlayer.score === 21) {
              const user = await getUser(userID, "gen");
              await bot.sendMessage(
                conversationID,
                `üÉè —É ${user.first_name} ${cards}, ${
                  user.sex === 2 ? "–Ω–∞–±—Ä–∞–ª" : "–Ω–∞–±—Ä–∞–ª–∞"
                } ‚Äî ${existPlayer.score}`
              );
              return await endGame21(neededRoom, arDelRoom);
            } else {
              neededRoom.start = true;
              neededRoom.online -= 1;
              const user = await getUser(userID, "gen");
              await bot.sendMessage(
                conversationID,
                `üÉè —É ${user.first_name} ${cards}, ${
                  user.sex === 2 ? "–Ω–∞–±—Ä–∞–ª" : "–Ω–∞–±—Ä–∞–ª–∞"
                } ‚Äî ${existPlayer.score}`
              );
              if (neededRoom.online < 1) {
                await endGame21(neededRoom, arDelRoom);
              } else {
                fs.writeFileSync(
                  "./cards21.json",
                  JSON.stringify([neededRoom, ...arDelRoom], null, 2)
                );
              }
            }
          } catch (err) {
            console.error(err);
            ctx.reply("&#9762; –ë–ª–∏–Ω –±–ª–∏–Ω—Å–∫–∏–π, —Å–±–æ–π –∫–∞–∫–æ–π-—Ç–æ [showCards]");
          }
        }
        if (payload.action === "giveRule") {
          bot.sendMessage(
            ctx.message.peer_id,
            '–ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É \n"–í–∑—è—Ç—å –∫–∞—Ä—Ç—ã", –±–æ—Ç –≤—ã–¥–∞—Å—Ç –≤ –ª—Å —Ç–≤–æ–∏ –∫–∞—Ä—Ç—ã,' +
              " —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –Ω–∞–±—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª—å—à—É—é —Å—É–º–º—É –æ—á–∫–æ–≤ —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ 21)," +
              ' –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–∑—è—Ç—å –µ—â–µ", - –±–æ—Ç –≤—ã–¥–∞—Å—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç—É –≤ –ª—Å, –µ—Å–ª–∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–±–æ—Ä,' +
              " —Ç—ã –∞–≤—Ç–æ–º–∞—Ç–æ–º –±—É–¥–µ—à—å –ª–æ—Ö–æ–º. \n–ï—Å–ª–∏ —Ç–µ–±—è —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—É–º–º–∞ –æ—á–∫–æ–≤, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É" +
              ' "–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—ã"\n\nA - 11 –æ—á–∫–æ–≤\nK - 4\nQ - 3\nJ - 2\n10 - 10\n9 - 9\n8 - 8\n7 - 7\n6 - 6'
          );
        }
        if (payload.action === "showBtn") {
          showButtons21(conversationID);
        }
      }
    });
    //==========================================================================================
    bot.startPolling();
  } catch (err) {
    console.error(err);
  }
}
start();
